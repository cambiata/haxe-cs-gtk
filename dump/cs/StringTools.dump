class StringTools{
	static public urlEncode(inline method) : s : String -> String

	 = [Function:s : String -> String]
		[Arg:String] [Local s(1827):String]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:String]
					[Field:stringToEscape : String -> String]
						[TypeExpr System.Uri:Class<cs.system.Uri>]
						[FStatic:stringToEscape : String -> String]
							System.Uri
							EscapeUriString
					[Local s(1827):String]

	static public urlDecode(inline method) : s : String -> String

	 = [Function:s : String -> String]
		[Arg:String] [Local s(1828):String]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:String]
					[Field:stringToUnescape : String -> String]
						[TypeExpr System.Uri:Class<cs.system.Uri>]
						[FStatic:stringToUnescape : String -> String]
							System.Uri
							UnescapeDataString
					[Local s(1828):String]

	static public htmlEscape(method) : s : String -> ?quotes : Null<Bool> -> String

	 = [Function:s : String -> ?quotes : Null<Bool> -> String]
		[Arg:String] [Local s(1829):String]
		[Arg:Null<Bool>]
			[Local quotes(1830):Null<Bool>]
			[Const null:s : String -> ?quotes : Null<Bool> -> String]
		[Block:Dynamic]
			[Binop:String]
				[Local s(1829):String]
				=
				[Call:String]
					[Field:sep : String -> String]
						[Call:Array<String>]
							[Field:delimiter : String -> Array<String>]
								[Call:String]
									[Field:sep : String -> String]
										[Call:Array<String>]
											[Field:delimiter : String -> Array<String>]
												[Call:String]
													[Field:sep : String -> String]
														[Call:Array<String>]
															[Field:delimiter : String -> Array<String>]
																[Local s(1829):String]
																[FInstance:delimiter : String -> Array<String>]
																	String
																	split
															[Const "&":String]
														[FInstance:sep : String -> String]
															Array<String>
															join
													[Const "&amp;":String]
												[FInstance:delimiter : String -> Array<String>]
													String
													split
											[Const "<":String]
										[FInstance:sep : String -> String]
											Array<String>
											join
									[Const "&lt;":String]
								[FInstance:delimiter : String -> Array<String>]
									String
									split
							[Const ">":String]
						[FInstance:sep : String -> String]
							Array<String>
							join
					[Const "&gt;":String]
			[If:String]
				[Parenthesis:Null<Bool>] [Local quotes(1830):Null<Bool>]
				[Then:Dynamic] [Return:Dynamic]
					[Call:String]
						[Field:sep : String -> String]
							[Call:Array<String>]
								[Field:delimiter : String -> Array<String>]
									[Call:String]
										[Field:sep : String -> String]
											[Call:Array<String>]
												[Field:delimiter : String -> Array<String>]
													[Local s(1829):String]
													[FInstance:delimiter : String -> Array<String>]
														String
														split
												[Const "\"":String]
											[FInstance:sep : String -> String]
												Array<String>
												join
										[Const "&quot;":String]
									[FInstance:delimiter : String -> Array<String>]
										String
										split
								[Const "'":String]
							[FInstance:sep : String -> String]
								Array<String>
								join
						[Const "&#039;":String]
				[Else:Dynamic] [Return:Dynamic] [Local s(1829):String]

	static public htmlUnescape(method) : s : String -> String

	 = [Function:s : String -> String]
		[Arg:String] [Local s(1831):String]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:String]
					[Field:sep : String -> String]
						[Call:Array<String>]
							[Field:delimiter : String -> Array<String>]
								[Call:String]
									[Field:sep : String -> String]
										[Call:Array<String>]
											[Field:delimiter : String -> Array<String>]
												[Call:String]
													[Field:sep : String -> String]
														[Call:Array<String>]
															[Field:delimiter : String -> Array<String>]
																[Call:String]
																	[Field:sep : String -> String]
																		[Call:Array<String>]
																			[Field:delimiter : String -> Array<String>]
																				[Call:String]
																					[Field:sep : String -> String]
																						[Call:Array<String>]
																							[Field:delimiter : String -> Array<String>]
																								[Local s(1831):String]
																								[FInstance:delimiter : String -> Array<String>]
																									String
																									split
																							[Const "&gt;":String]
																						[FInstance:sep : String -> String]
																							Array<String>
																							join
																					[Const ">":String]
																				[FInstance:delimiter : String -> Array<String>]
																					String
																					split
																			[Const "&lt;":String]
																		[FInstance:sep : String -> String]
																			Array<String>
																			join
																	[Const "<":String]
																[FInstance:delimiter : String -> Array<String>]
																	String
																	split
															[Const "&quot;":String]
														[FInstance:sep : String -> String]
															Array<String>
															join
													[Const "\"":String]
												[FInstance:delimiter : String -> Array<String>]
													String
													split
											[Const "&#039;":String]
										[FInstance:sep : String -> String]
											Array<String>
											join
									[Const "'":String]
								[FInstance:delimiter : String -> Array<String>]
									String
									split
							[Const "&amp;":String]
						[FInstance:sep : String -> String]
							Array<String>
							join
					[Const "&":String]

	static public startsWith(inline method) : s : String -> start : String -> Bool

	 = [Function:s : String -> start : String -> Bool]
		[Arg:String] [Local s(885):String]
		[Arg:String] [Local start(886):String]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Bool]
					[Field:value : String -> Bool]
						[Local s(885):String]
						[FInstance:value : String -> Bool]
							String
							StartsWith
					[Local start(886):String]

	static public endsWith(inline method) : s : String -> end : String -> Bool

	 = [Function:s : String -> end : String -> Bool]
		[Arg:String] [Local s(1832):String]
		[Arg:String] [Local end(1833):String]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:Bool]
					[Field:value : String -> Bool]
						[Local s(1832):String]
						[FInstance:value : String -> Bool]
							String
							EndsWith
					[Local end(1833):String]

	static public isSpace(method) : s : String -> pos : Int -> Bool

	 = [Function:s : String -> pos : Int -> Bool]
		[Arg:String] [Local s(1834):String]
		[Arg:Int] [Local pos(1835):Int]
		[Block:Dynamic]
			[Var c(1836):Null<Int>]
				[Call:Null<Int>]
					[Field:index : Int -> Null<Int>]
						[Local s(1834):String]
						[FInstance:index : Int -> Null<Int>]
							String
							charCodeAt
					[Local pos(1835):Int]
			[Return:Dynamic]
				[Binop:Bool]
					[Binop:Bool]
						[Binop:Bool]
							[Local c(1836):Null<Int>]
							>
							[Const 8:Int]
						&&
						[Binop:Bool]
							[Local c(1836):Null<Int>]
							<
							[Const 14:Int]
					||
					[Binop:Bool]
						[Local c(1836):Null<Int>]
						==
						[Const 32:Int]

	static public ltrim(inline method) : s : String -> String

	 = [Function:s : String -> String]
		[Arg:String] [Local s(1837):String]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:String]
					[Field:Void -> String]
						[Local s(1837):String]
						[FInstance:Void -> String]
							String
							TrimStart

	static public rtrim(inline method) : s : String -> String

	 = [Function:s : String -> String]
		[Arg:String] [Local s(1838):String]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:String]
					[Field:Void -> String]
						[Local s(1838):String]
						[FInstance:Void -> String]
							String
							TrimEnd

	static public trim(inline method) : s : String -> String

	 = [Function:s : String -> String]
		[Arg:String] [Local s(1839):String]
		[Block:Dynamic]
			[Return:Dynamic]
				[Call:String]
					[Field:Void -> String]
						[Local s(1839):String]
						[FInstance:Void -> String]
							String
							Trim

	static public lpad(method) : s : String -> c : String -> l : Int -> String

	 = [Function:s : String -> c : String -> l : Int -> String]
		[Arg:String] [Local s(1840):String]
		[Arg:String] [Local c(1841):String]
		[Arg:Int] [Local l(1842):Int]
		[Block:Dynamic]
			[If:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Field:Int]
							[Local c(1841):String]
							[FInstance:Int]
								String
								length
						<=
						[Const 0:Int]
				[Then:Dynamic] [Return:Dynamic] [Local s(1840):String]
			[While:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Field:Int]
							[Local s(1840):String]
							[FInstance:Int]
								String
								length
						<
						[Local l(1842):Int]
				[Binop:String]
					[Local s(1840):String]
					=
					[Binop:String]
						[Local c(1841):String]
						+
						[Local s(1840):String]
			[Return:Dynamic] [Local s(1840):String]

	static public rpad(method) : s : String -> c : String -> l : Int -> String

	 = [Function:s : String -> c : String -> l : Int -> String]
		[Arg:String] [Local s(1843):String]
		[Arg:String] [Local c(1844):String]
		[Arg:Int] [Local l(1845):Int]
		[Block:Dynamic]
			[If:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Field:Int]
							[Local c(1844):String]
							[FInstance:Int]
								String
								length
						<=
						[Const 0:Int]
				[Then:Dynamic] [Return:Dynamic] [Local s(1843):String]
			[While:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Field:Int]
							[Local s(1843):String]
							[FInstance:Int]
								String
								length
						<
						[Local l(1845):Int]
				[Binop:String]
					[Local s(1843):String]
					=
					[Binop:String]
						[Local s(1843):String]
						+
						[Local c(1844):String]
			[Return:Dynamic] [Local s(1843):String]

	static public replace(method) : s : String -> sub : String -> by : String -> String

	 = [Function:s : String -> sub : String -> by : String -> String]
		[Arg:String] [Local s(1846):String]
		[Arg:String] [Local sub(1847):String]
		[Arg:String] [Local by(1848):String]
		[Block:Void]
			[If:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Field:Int]
							[Local sub(1847):String]
							[FInstance:Int]
								String
								length
						==
						[Const 0:Int]
				[Then:Dynamic] [Return:Dynamic]
					[Call:String]
						[Field:sep : String -> String]
							[Call:Array<String>]
								[Field:delimiter : String -> Array<String>]
									[Local s(1846):String]
									[FInstance:delimiter : String -> Array<String>]
										String
										split
								[Local sub(1847):String]
							[FInstance:sep : String -> String]
								Array<String>
								join
						[Local by(1848):String]
				[Else:Dynamic] [Return:Dynamic]
					[Call:String]
						[Field:oldValue : String -> newValue : String -> String]
							[Local s(1846):String]
							[FInstance:oldValue : String -> newValue : String -> String]
								String
								Replace
						[Local sub(1847):String]
						[Local by(1848):String]

	static public hex(method) : n : Int -> ?digits : Null<Int> -> String

	 = [Function:n : Int -> ?digits : Null<Int> -> String]
		[Arg:Int] [Local n(1849):Int]
		[Arg:Null<Int>]
			[Local digits(1850):Null<Int>]
			[Const null:n : Int -> ?digits : Null<Int> -> String]
		[Block:Dynamic]
			[Var s(1851):String] [Const "":String]
			[Var hexChars(1852):String] [Const "0123456789ABCDEF":String]
			[Do:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Local n(1849):Int]
						>
						[Const 0:Int]
				[Block:Int]
					[Binop:String]
						[Local s(1851):String]
						=
						[Binop:String]
							[Call:String]
								[Field:index : Int -> String]
									[Local hexChars(1852):String]
									[FInstance:index : Int -> String]
										String
										charAt
								[Binop:Int]
									[Local n(1849):Int]
									&
									[Const 15:Int]
							+
							[Local s(1851):String]
					[Binop:Int]
						[Local n(1849):Int]
						>>>=
						[Const 4:Int]
			[If:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Local digits(1850):Null<Int>]
						!=
						[Const null:Null<Int>]
				[Then:Void] [While:Void]
					[Parenthesis:Bool]
						[Binop:Bool]
							[Field:Int]
								[Local s(1851):String]
								[FInstance:Int]
									String
									length
							<
							[Local digits(1850):Null<Int>]
					[Binop:String]
						[Local s(1851):String]
						=
						[Binop:String]
							[Const "0":String]
							+
							[Local s(1851):String]
			[Return:Dynamic] [Local s(1851):String]

	static public fastCodeAt(inline method) : s : String -> index : Int -> Int

	 = [Function:s : String -> index : Int -> Int]
		[Arg:String] [Local s(1853):String]
		[Arg:Int] [Local index(1854):Int]
		[Block:Dynamic]
			[If:Int]
				[Parenthesis:Bool]
					[Cast:Bool]
						[Binop:Bool]
							[Cast:UInt]
								[Local index(1854):Int]
								[TypeExpr UInt:UInt]
							<
							[Field:Int]
								[Local s(1853):String]
								[FInstance:Int]
									String
									length
				[Then:Dynamic] [Return:Dynamic]
					[Cast:Int]
						[Array:cs.Char16]
							[Local s(1853):String]
							[Local index(1854):Int]
						[TypeExpr Int:Int]
				[Else:Dynamic] [Return:Dynamic] [Const -1:Int]

	static public isEof(inline method) : c : Int -> Bool

	 = [Function:c : Int -> Bool]
		[Arg:Int] [Local c(1855):Int]
		[Block:Dynamic]
			[Return:Dynamic]
				[Binop:Bool]
					[Local c(1855):Int]
					==
					[Const -1:Int]

}