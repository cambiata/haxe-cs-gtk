class Array<T : Array.T> implements ArrayAccess<Array.T>{
	public new(method) : Void -> Void

	 = [Function:Void -> Void]
		[Block:cs.NativeArray<Array.T>]
			[Binop:Int]
				[Field:Int]
					[Const this:Array<Array.T>]
					[FInstance:Int]
						Array<Array.T>
						length
				=
				[Const 0:Int]
			[Binop:cs.NativeArray<Array.T>]
				[Field:cs.NativeArray<Array.T>]
					[Const this:Array<Array.T>]
					[FInstance:cs.NativeArray<Array.T>]
						Array<Array.T>
						__a
				=
				[New:cs.NativeArray<Array.T>]
					cs.NativeArray<Array.T>
					[Const 0:Int]

	new(method) : native : cs.NativeArray<Array.T> -> Void

	 = [Function:native : cs.NativeArray<Array.T> -> Void]
		[Arg:cs.NativeArray<Array.T>] [Local native(391):cs.NativeArray<Array.T>]
		[Block:cs.NativeArray<Array.T>]
			[Binop:Int]
				[Field:Int]
					[Const this:Array<Array.T>]
					[FInstance:Int]
						Array<Array.T>
						length
				=
				[Call:Int]
					[Field:Void -> Int]
						[Local native(391):cs.NativeArray<Array.T>]
						[FInstance:Void -> Int]
							System.Array
							get_Length
			[Binop:cs.NativeArray<Array.T>]
				[Field:cs.NativeArray<Array.T>]
					[Const this:Array<Array.T>]
					[FInstance:cs.NativeArray<Array.T>]
						Array<Array.T>
						__a
				=
				[Local native(391):cs.NativeArray<Array.T>]

	public length((default,null)) : Int

	__a(var) : cs.NativeArray<Array.T>

	public concat(method) : a : Array<Array.T> -> Array<Array.T>

	 = [Function:a : Array<Array.T> -> Array<Array.T>]
		[Arg:Array<Array.T>] [Local a(393):Array<Array.T>]
		[Block:Dynamic]
			[Var len(394):Int]
				[Binop:Int]
					[Field:Int]
						[Const this:Array<Array.T>]
						[FInstance:Int]
							Array<Array.T>
							length
					+
					[Field:Int]
						[Local a(393):Array<Array.T>]
						[FInstance:Int]
							Array<Array.T>
							length
			[Var retarr(395):cs.NativeArray<Array.T>]
				[New:cs.NativeArray<Array.T>]
					cs.NativeArray<Array.T>
					[Local len(394):Int]
			[Call:Void]
				[Field:sourceArray : System.Array -> sourceIndex : Int -> destinationArray : System.Array -> destinationIndex : Int -> length : Int -> Void]
					[TypeExpr System.Array:Class<cs.system.Array>]
					[FStatic:sourceArray : System.Array -> sourceIndex : Int -> destinationArray : System.Array -> destinationIndex : Int -> length : Int -> Void]
						System.Array
						Copy
				[Field:cs.NativeArray<Array.T>]
					[Const this:Array<Array.T>]
					[FInstance:cs.NativeArray<Array.T>]
						Array<Array.T>
						__a
				[Const 0:Int]
				[Local retarr(395):cs.NativeArray<Array.T>]
				[Const 0:Int]
				[Field:Int]
					[Const this:Array<Array.T>]
					[FInstance:Int]
						Array<Array.T>
						length
			[Call:Void]
				[Field:sourceArray : System.Array -> sourceIndex : Int -> destinationArray : System.Array -> destinationIndex : Int -> length : Int -> Void]
					[TypeExpr System.Array:Class<cs.system.Array>]
					[FStatic:sourceArray : System.Array -> sourceIndex : Int -> destinationArray : System.Array -> destinationIndex : Int -> length : Int -> Void]
						System.Array
						Copy
				[Field:cs.NativeArray<Array.T>]
					[Local a(393):Array<Array.T>]
					[FInstance:cs.NativeArray<Array.T>]
						Array<Array.T>
						__a
				[Const 0:Int]
				[Local retarr(395):cs.NativeArray<Array.T>]
				[Field:Int]
					[Const this:Array<Array.T>]
					[FInstance:Int]
						Array<Array.T>
						length
				[Field:Int]
					[Local a(393):Array<Array.T>]
					[FInstance:Int]
						Array<Array.T>
						length
			[Return:Dynamic]
				[New:Array<Array.T>]
					Array<Array.T>
					[Local retarr(395):cs.NativeArray<Array.T>]

	concatNative(method) : a : cs.NativeArray<Array.T> -> Void

	 = [Function:a : cs.NativeArray<Array.T> -> Void]
		[Arg:cs.NativeArray<Array.T>] [Local a(417):cs.NativeArray<Array.T>]
		[Block:Int]
			[Var __a(418):cs.NativeArray<Array.T>]
				[Field:cs.NativeArray<Array.T>]
					[Const this:Array<Array.T>]
					[FInstance:cs.NativeArray<Array.T>]
						Array<Array.T>
						__a
			[Var len(419):Int]
				[Binop:Int]
					[Field:Int]
						[Const this:Array<Array.T>]
						[FInstance:Int]
							Array<Array.T>
							length
					+
					[Call:Int]
						[Field:Void -> Int]
							[Local a(417):cs.NativeArray<Array.T>]
							[FInstance:Void -> Int]
								System.Array
								get_Length
			[If:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Call:Int]
							[Field:Void -> Int]
								[Local __a(418):cs.NativeArray<Array.T>]
								[FInstance:Void -> Int]
									System.Array
									get_Length
						>=
						[Local len(419):Int]
				[Then:Void] [Call:Void]
					[Field:sourceArray : System.Array -> sourceIndex : Int -> destinationArray : System.Array -> destinationIndex : Int -> length : Int -> Void]
						[TypeExpr System.Array:Class<cs.system.Array>]
						[FStatic:sourceArray : System.Array -> sourceIndex : Int -> destinationArray : System.Array -> destinationIndex : Int -> length : Int -> Void]
							System.Array
							Copy
					[Local a(417):cs.NativeArray<Array.T>]
					[Const 0:Int]
					[Local __a(418):cs.NativeArray<Array.T>]
					[Field:Int]
						[Const this:Array<Array.T>]
						[FInstance:Int]
							Array<Array.T>
							length
					[Field:Int]
						[Const this:Array<Array.T>]
						[FInstance:Int]
							Array<Array.T>
							length
				[Else:cs.NativeArray<Array.T>] [Block:cs.NativeArray<Array.T>]
					[Var newarr(429):cs.NativeArray<Array.T>]
						[New:cs.NativeArray<Array.T>]
							cs.NativeArray<Array.T>
							[Local len(419):Int]
					[Call:Void]
						[Field:sourceArray : System.Array -> sourceIndex : Int -> destinationArray : System.Array -> destinationIndex : Int -> length : Int -> Void]
							[TypeExpr System.Array:Class<cs.system.Array>]
							[FStatic:sourceArray : System.Array -> sourceIndex : Int -> destinationArray : System.Array -> destinationIndex : Int -> length : Int -> Void]
								System.Array
								Copy
						[Local __a(418):cs.NativeArray<Array.T>]
						[Const 0:Int]
						[Local newarr(429):cs.NativeArray<Array.T>]
						[Const 0:Int]
						[Field:Int]
							[Const this:Array<Array.T>]
							[FInstance:Int]
								Array<Array.T>
								length
					[Call:Void]
						[Field:sourceArray : System.Array -> sourceIndex : Int -> destinationArray : System.Array -> destinationIndex : Int -> length : Int -> Void]
							[TypeExpr System.Array:Class<cs.system.Array>]
							[FStatic:sourceArray : System.Array -> sourceIndex : Int -> destinationArray : System.Array -> destinationIndex : Int -> length : Int -> Void]
								System.Array
								Copy
						[Local a(417):cs.NativeArray<Array.T>]
						[Const 0:Int]
						[Local newarr(429):cs.NativeArray<Array.T>]
						[Field:Int]
							[Const this:Array<Array.T>]
							[FInstance:Int]
								Array<Array.T>
								length
						[Call:Int]
							[Field:Void -> Int]
								[Local a(417):cs.NativeArray<Array.T>]
								[FInstance:Void -> Int]
									System.Array
									get_Length
					[Binop:cs.NativeArray<Array.T>]
						[Field:cs.NativeArray<Array.T>]
							[Const this:Array<Array.T>]
							[FInstance:cs.NativeArray<Array.T>]
								Array<Array.T>
								__a
						=
						[Local newarr(429):cs.NativeArray<Array.T>]
			[Binop:Int]
				[Field:Int]
					[Const this:Array<Array.T>]
					[FInstance:Int]
						Array<Array.T>
						length
				=
				[Local len(419):Int]

	public indexOf(method) : x : Array.T -> ?fromIndex : Null<Int> -> Int

	 = [Function:x : Array.T -> ?fromIndex : Null<Int> -> Int]
		[Arg:Array.T] [Local x(448):Array.T]
		[Arg:Null<Int>]
			[Local fromIndex(449):Null<Int>]
			[Const null:x : Array.T -> ?fromIndex : Null<Int> -> Int]
		[Block:Dynamic]
			[Var len(450):Int]
				[Field:Int]
					[Const this:Array<Array.T>]
					[FInstance:Int]
						Array<Array.T>
						length
			[Var i(451):Int]
			[If:Int]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Local fromIndex(449):Null<Int>]
						==
						[Const null:Null<Int>]
				[Then:Int] [Binop:Int]
					[Local i(451):Int]
					=
					[Const 0:Int]
				[Else:Int] [Binop:Int]
					[Local i(451):Int]
					=
					[Local fromIndex(449):Null<Int>]
			[If:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Local i(451):Int]
						<
						[Const 0:Int]
				[Then:Void] [Block:Void]
					[Binop:Int]
						[Local i(451):Int]
						+=
						[Local len(450):Int]
					[If:Void]
						[Parenthesis:Bool]
							[Binop:Bool]
								[Local i(451):Int]
								<
								[Const 0:Int]
						[Then:Int] [Binop:Int]
							[Local i(451):Int]
							=
							[Const 0:Int]
				[Else:Void] [If:Void]
					[Parenthesis:Bool]
						[Binop:Bool]
							[Local i(451):Int]
							>=
							[Local len(450):Int]
					[Then:Dynamic] [Return:Dynamic] [Const -1:Int]
			[Return:Dynamic]
				[Call:Int]
					[Field:array : cs.NativeArray<Array.T> -> value : Array.T -> startIndex : Int -> count : Int -> Int]
						[TypeExpr System.Array:Class<cs.system.Array>]
						[FStatic:array : cs.NativeArray<Array.T> -> value : Array.T -> startIndex : Int -> count : Int -> Int]
							System.Array
							IndexOf
					[Field:cs.NativeArray<Array.T>]
						[Const this:Array<Array.T>]
						[FInstance:cs.NativeArray<Array.T>]
							Array<Array.T>
							__a
					[Local x(448):Array.T]
					[Local i(451):Int]
					[Binop:Int]
						[Local len(450):Int]
						-
						[Local i(451):Int]

	public lastIndexOf(method) : x : Array.T -> ?fromIndex : Null<Int> -> Int

	 = [Function:x : Array.T -> ?fromIndex : Null<Int> -> Int]
		[Arg:Array.T] [Local x(452):Array.T]
		[Arg:Null<Int>]
			[Local fromIndex(453):Null<Int>]
			[Const null:x : Array.T -> ?fromIndex : Null<Int> -> Int]
		[Block:Dynamic]
			[Var len(454):Int]
				[Field:Int]
					[Const this:Array<Array.T>]
					[FInstance:Int]
						Array<Array.T>
						length
			[Var i(455):Int]
			[If:Int]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Local fromIndex(453):Null<Int>]
						==
						[Const null:Null<Int>]
				[Then:Int] [Binop:Int]
					[Local i(455):Int]
					=
					[Binop:Int]
						[Local len(454):Int]
						-
						[Const 1:Int]
				[Else:Int] [Binop:Int]
					[Local i(455):Int]
					=
					[Local fromIndex(453):Null<Int>]
			[If:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Local i(455):Int]
						>=
						[Local len(454):Int]
				[Then:Int] [Binop:Int]
					[Local i(455):Int]
					=
					[Binop:Int]
						[Local len(454):Int]
						-
						[Const 1:Int]
				[Else:Void] [If:Void]
					[Parenthesis:Bool]
						[Binop:Bool]
							[Local i(455):Int]
							<
							[Const 0:Int]
					[Then:Void] [Block:Void]
						[Binop:Int]
							[Local i(455):Int]
							+=
							[Local len(454):Int]
						[If:Void]
							[Parenthesis:Bool]
								[Binop:Bool]
									[Local i(455):Int]
									<
									[Const 0:Int]
							[Then:Dynamic] [Return:Dynamic] [Const -1:Int]
			[Return:Dynamic]
				[Call:Int]
					[Field:array : cs.NativeArray<Array.T> -> value : Array.T -> startIndex : Int -> count : Int -> Int]
						[TypeExpr System.Array:Class<cs.system.Array>]
						[FStatic:array : cs.NativeArray<Array.T> -> value : Array.T -> startIndex : Int -> count : Int -> Int]
							System.Array
							LastIndexOf
					[Field:cs.NativeArray<Array.T>]
						[Const this:Array<Array.T>]
						[FInstance:cs.NativeArray<Array.T>]
							Array<Array.T>
							__a
					[Local x(452):Array.T]
					[Local i(455):Int]
					[Binop:Int]
						[Local i(455):Int]
						+
						[Const 1:Int]

	public join(method) : sep : String -> String

	 = [Function:sep : String -> String]
		[Arg:String] [Local sep(456):String]
		[Block:Dynamic]
			[Var buf_b(8864):System.Text.StringBuilder] [New:System.Text.StringBuilder] System.Text.StringBuilder
			[Var i(458):Int] [Const -1:Int]
			[Var first(459):Bool] [Const true:Bool]
			[Var length(460):Int]
				[Field:Int]
					[Const this:Array<Array.T>]
					[FInstance:Int]
						Array<Array.T>
						length
			[While:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Unop:Int]
							++
							Prefix
							[Local i(458):Int]
						<
						[Local length(460):Int]
				[Block:Void]
					[If:Void]
						[Parenthesis:Bool] [Local first(459):Bool]
						[Then:Bool] [Binop:Bool]
							[Local first(459):Bool]
							=
							[Const false:Bool]
						[Else:System.Text.StringBuilder] [Call:System.Text.StringBuilder]
							[Field:value : String -> System.Text.StringBuilder]
								[Local buf_b(8864):System.Text.StringBuilder]
								[FInstance:value : String -> System.Text.StringBuilder]
									System.Text.StringBuilder
									Append
							[Call:String]
								[Field:s : Dynamic -> String]
									[TypeExpr Std:Class<Std>]
									[FStatic:s : Dynamic -> String]
										Std
										string
								[Local sep(456):String]
					[Call:System.Text.StringBuilder]
						[Field:value : String -> System.Text.StringBuilder]
							[Local buf_b(8864):System.Text.StringBuilder]
							[FInstance:value : String -> System.Text.StringBuilder]
								System.Text.StringBuilder
								Append
						[Call:String]
							[Field:s : Dynamic -> String]
								[TypeExpr Std:Class<Std>]
								[FStatic:s : Dynamic -> String]
									Std
									string
							[Array:Array.T]
								[Field:cs.NativeArray<Array.T>]
									[Const this:Array<Array.T>]
									[FInstance:cs.NativeArray<Array.T>]
										Array<Array.T>
										__a
								[Local i(458):Int]
			[Return:Dynamic]
				[Call:String]
					[Field:Void -> String]
						[Local buf_b(8864):System.Text.StringBuilder]
						[FInstance:Void -> String]
							System.Text.StringBuilder
							ToString

	public pop(method) : Void -> Null<Array.T>

	 = [Function:Void -> Null<Array.T>]
		[Block:Void]
			[Var __a(474):cs.NativeArray<Array.T>]
				[Field:cs.NativeArray<Array.T>]
					[Const this:Array<Array.T>]
					[FInstance:cs.NativeArray<Array.T>]
						Array<Array.T>
						__a
			[Var length(475):Int]
				[Field:Int]
					[Const this:Array<Array.T>]
					[FInstance:Int]
						Array<Array.T>
						length
			[If:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Local length(475):Int]
						>
						[Const 0:Int]
				[Then:Dynamic] [Block:Dynamic]
					[Var val(476):Array.T]
						[Array:Array.T]
							[Local __a(474):cs.NativeArray<Array.T>]
							[Unop:Int]
								--
								Prefix
								[Local length(475):Int]
					[Binop:Array.T]
						[Array:Array.T]
							[Local __a(474):cs.NativeArray<Array.T>]
							[Local length(475):Int]
						=
						[Const null:Array.T]
					[Binop:Int]
						[Field:Int]
							[Const this:Array<Array.T>]
							[FInstance:Int]
								Array<Array.T>
								length
						=
						[Local length(475):Int]
					[Return:Dynamic] [Local val(476):Array.T]
				[Else:Dynamic] [Return:Dynamic] [Const null:Null<Array.T>]

	public push(method) : x : Array.T -> Int

	 = [Function:x : Array.T -> Int]
		[Arg:Array.T] [Local x(477):Array.T]
		[Block:Dynamic]
			[If:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Field:Int]
							[Const this:Array<Array.T>]
							[FInstance:Int]
								Array<Array.T>
								length
						>=
						[Call:Int]
							[Field:Void -> Int]
								[Field:cs.NativeArray<Array.T>]
									[Const this:Array<Array.T>]
									[FInstance:cs.NativeArray<Array.T>]
										Array<Array.T>
										__a
								[FInstance:Void -> Int]
									System.Array
									get_Length
				[Then:cs.NativeArray<Array.T>] [Block:cs.NativeArray<Array.T>]
					[Var newLen(478):Int]
						[Binop:Int]
							[Parenthesis:Int]
								[Binop:Int]
									[Field:Int]
										[Const this:Array<Array.T>]
										[FInstance:Int]
											Array<Array.T>
											length
									<<
									[Const 1:Int]
							+
							[Const 1:Int]
					[Var newarr(479):cs.NativeArray<Array.T>]
						[New:cs.NativeArray<Array.T>]
							cs.NativeArray<Array.T>
							[Local newLen(478):Int]
					[Call:Void]
						[Field:array : System.Array -> index : Int -> Void]
							[Field:cs.NativeArray<Array.T>]
								[Const this:Array<Array.T>]
								[FInstance:cs.NativeArray<Array.T>]
									Array<Array.T>
									__a
							[FInstance:array : System.Array -> index : Int -> Void]
								System.Array
								CopyTo
						[Local newarr(479):cs.NativeArray<Array.T>]
						[Const 0:Int]
					[Binop:cs.NativeArray<Array.T>]
						[Field:cs.NativeArray<Array.T>]
							[Const this:Array<Array.T>]
							[FInstance:cs.NativeArray<Array.T>]
								Array<Array.T>
								__a
						=
						[Local newarr(479):cs.NativeArray<Array.T>]
			[Binop:Array.T]
				[Array:Array.T]
					[Field:cs.NativeArray<Array.T>]
						[Const this:Array<Array.T>]
						[FInstance:cs.NativeArray<Array.T>]
							Array<Array.T>
							__a
					[Field:Int]
						[Const this:Array<Array.T>]
						[FInstance:Int]
							Array<Array.T>
							length
				=
				[Local x(477):Array.T]
			[Return:Dynamic]
				[Unop:Int]
					++
					Prefix
					[Field:Int]
						[Const this:Array<Array.T>]
						[FInstance:Int]
							Array<Array.T>
							length

	public reverse(method) : Void -> Void

	 = [Function:Void -> Void]
		[Block:Void]
			[Var i(483):Int] [Const 0:Int]
			[Var l(484):Int]
				[Field:Int]
					[Const this:Array<Array.T>]
					[FInstance:Int]
						Array<Array.T>
						length
			[Var a(485):cs.NativeArray<Array.T>]
				[Field:cs.NativeArray<Array.T>]
					[Const this:Array<Array.T>]
					[FInstance:cs.NativeArray<Array.T>]
						Array<Array.T>
						__a
			[Var half(486):Int]
				[Binop:Int]
					[Local l(484):Int]
					>>
					[Const 1:Int]
			[Binop:Int]
				[Local l(484):Int]
				-=
				[Const 1:Int]
			[While:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Local i(483):Int]
						<
						[Local half(486):Int]
				[Block:Int]
					[Var tmp(487):Array.T]
						[Array:Array.T]
							[Local a(485):cs.NativeArray<Array.T>]
							[Local i(483):Int]
					[Binop:Array.T]
						[Array:Array.T]
							[Local a(485):cs.NativeArray<Array.T>]
							[Local i(483):Int]
						=
						[Array:Array.T]
							[Local a(485):cs.NativeArray<Array.T>]
							[Binop:Int]
								[Local l(484):Int]
								-
								[Local i(483):Int]
					[Binop:Array.T]
						[Array:Array.T]
							[Local a(485):cs.NativeArray<Array.T>]
							[Binop:Int]
								[Local l(484):Int]
								-
								[Local i(483):Int]
						=
						[Local tmp(487):Array.T]
					[Binop:Int]
						[Local i(483):Int]
						+=
						[Const 1:Int]

	public shift(method) : Void -> Null<Array.T>

	 = [Function:Void -> Null<Array.T>]
		[Block:Dynamic]
			[Var l(488):Int]
				[Field:Int]
					[Const this:Array<Array.T>]
					[FInstance:Int]
						Array<Array.T>
						length
			[If:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Local l(488):Int]
						==
						[Const 0:Int]
				[Then:Dynamic] [Return:Dynamic] [Const null:Null<Array.T>]
			[Var a(489):cs.NativeArray<Array.T>]
				[Field:cs.NativeArray<Array.T>]
					[Const this:Array<Array.T>]
					[FInstance:cs.NativeArray<Array.T>]
						Array<Array.T>
						__a
			[Var x(490):Array.T]
				[Array:Array.T]
					[Local a(489):cs.NativeArray<Array.T>]
					[Const 0:Int]
			[Binop:Int]
				[Local l(488):Int]
				-=
				[Const 1:Int]
			[Call:Void]
				[Field:sourceArray : System.Array -> sourceIndex : Int -> destinationArray : System.Array -> destinationIndex : Int -> length : Int -> Void]
					[TypeExpr System.Array:Class<cs.system.Array>]
					[FStatic:sourceArray : System.Array -> sourceIndex : Int -> destinationArray : System.Array -> destinationIndex : Int -> length : Int -> Void]
						System.Array
						Copy
				[Local a(489):cs.NativeArray<Array.T>]
				[Const 1:Int]
				[Local a(489):cs.NativeArray<Array.T>]
				[Const 0:Int]
				[Binop:Int]
					[Field:Int]
						[Const this:Array<Array.T>]
						[FInstance:Int]
							Array<Array.T>
							length
					-
					[Const 1:Int]
			[Binop:Array.T]
				[Array:Array.T]
					[Local a(489):cs.NativeArray<Array.T>]
					[Local l(488):Int]
				=
				[Const null:Array.T]
			[Binop:Int]
				[Field:Int]
					[Const this:Array<Array.T>]
					[FInstance:Int]
						Array<Array.T>
						length
				=
				[Local l(488):Int]
			[Return:Dynamic] [Local x(490):Array.T]

	public slice(method) : pos : Int -> ?end : Null<Int> -> Array<Array.T>

	 = [Function:pos : Int -> ?end : Null<Int> -> Array<Array.T>]
		[Arg:Int] [Local pos(500):Int]
		[Arg:Null<Int>]
			[Local end(501):Null<Int>]
			[Const null:pos : Int -> ?end : Null<Int> -> Array<Array.T>]
		[Block:Dynamic]
			[If:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Local pos(500):Int]
						<
						[Const 0:Int]
				[Then:Void] [Block:Void]
					[Binop:Int]
						[Local pos(500):Int]
						=
						[Binop:Int]
							[Field:Int]
								[Const this:Array<Array.T>]
								[FInstance:Int]
									Array<Array.T>
									length
							+
							[Local pos(500):Int]
					[If:Void]
						[Parenthesis:Bool]
							[Binop:Bool]
								[Local pos(500):Int]
								<
								[Const 0:Int]
						[Then:Int] [Binop:Int]
							[Local pos(500):Int]
							=
							[Const 0:Int]
			[If:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Local end(501):Null<Int>]
						==
						[Const null:Null<Int>]
				[Then:Null<Int>] [Binop:Null<Int>]
					[Local end(501):Null<Int>]
					=
					[Field:Int]
						[Const this:Array<Array.T>]
						[FInstance:Int]
							Array<Array.T>
							length
				[Else:Void] [If:Void]
					[Parenthesis:Bool]
						[Binop:Bool]
							[Local end(501):Null<Int>]
							<
							[Const 0:Int]
					[Then:Null<Int>] [Binop:Null<Int>]
						[Local end(501):Null<Int>]
						=
						[Binop:Int]
							[Field:Int]
								[Const this:Array<Array.T>]
								[FInstance:Int]
									Array<Array.T>
									length
							+
							[Local end(501):Null<Int>]
			[If:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Local end(501):Null<Int>]
						>
						[Field:Int]
							[Const this:Array<Array.T>]
							[FInstance:Int]
								Array<Array.T>
								length
				[Then:Null<Int>] [Binop:Null<Int>]
					[Local end(501):Null<Int>]
					=
					[Field:Int]
						[Const this:Array<Array.T>]
						[FInstance:Int]
							Array<Array.T>
							length
			[Var len(502):Int]
				[Binop:Int]
					[Local end(501):Null<Int>]
					-
					[Local pos(500):Int]
			[If:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Local len(502):Int]
						<
						[Const 0:Int]
				[Then:Dynamic] [Return:Dynamic] [New:Array<Array.T>] Array<Array.T>
			[Var newarr(503):cs.NativeArray<Array.T>]
				[New:cs.NativeArray<Array.T>]
					cs.NativeArray<Array.T>
					[Local len(502):Int]
			[Call:Void]
				[Field:sourceArray : System.Array -> sourceIndex : Int -> destinationArray : System.Array -> destinationIndex : Int -> length : Int -> Void]
					[TypeExpr System.Array:Class<cs.system.Array>]
					[FStatic:sourceArray : System.Array -> sourceIndex : Int -> destinationArray : System.Array -> destinationIndex : Int -> length : Int -> Void]
						System.Array
						Copy
				[Field:cs.NativeArray<Array.T>]
					[Const this:Array<Array.T>]
					[FInstance:cs.NativeArray<Array.T>]
						Array<Array.T>
						__a
				[Local pos(500):Int]
				[Local newarr(503):cs.NativeArray<Array.T>]
				[Const 0:Int]
				[Local len(502):Int]
			[Return:Dynamic]
				[New:Array<Array.T>]
					Array<Array.T>
					[Local newarr(503):cs.NativeArray<Array.T>]

	public sort(method) : f : (Array.T -> Array.T -> Int) -> Void

	 = [Function:f : (Array.T -> Array.T -> Int) -> Void]
		[Arg:Array.T -> Array.T -> Int] [Local f(516):Array.T -> Array.T -> Int]
		[Block:Void]
			[If:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Field:Int]
							[Const this:Array<Array.T>]
							[FInstance:Int]
								Array<Array.T>
								length
						==
						[Const 0:Int]
				[Then:Dynamic] [Return:Dynamic]
			[Call:Void]
				[Field:lo : Int -> hi : Int -> f : (Array.T -> Array.T -> Int) -> Void]
					[Const this:Array<Array.T>]
					[FInstance:lo : Int -> hi : Int -> f : (Array.T -> Array.T -> Int) -> Void]
						Array<Array.T>
						quicksort
				[Const 0:Int]
				[Binop:Int]
					[Field:Int]
						[Const this:Array<Array.T>]
						[FInstance:Int]
							Array<Array.T>
							length
					-
					[Const 1:Int]
				[Local f(516):Array.T -> Array.T -> Int]

	quicksort(method) : lo : Int -> hi : Int -> f : (Array.T -> Array.T -> Int) -> Void

	 = [Function:lo : Int -> hi : Int -> f : (Array.T -> Array.T -> Int) -> Void]
		[Arg:Int] [Local lo(517):Int]
		[Arg:Int] [Local hi(518):Int]
		[Arg:Array.T -> Array.T -> Int] [Local f(519):Array.T -> Array.T -> Int]
		[Block:Void]
			[Var buf(520):cs.NativeArray<Array.T>]
				[Field:cs.NativeArray<Array.T>]
					[Const this:Array<Array.T>]
					[FInstance:cs.NativeArray<Array.T>]
						Array<Array.T>
						__a
			[Var i(521):Int] [Local lo(517):Int]
			[Var j(522):Int] [Local hi(518):Int]
			[Var p(523):Array.T]
				[Array:Array.T]
					[Local buf(520):cs.NativeArray<Array.T>]
					[Binop:Int]
						[Binop:Int]
							[Local i(521):Int]
							+
							[Local j(522):Int]
						>>
						[Const 1:Int]
			[While:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Local i(521):Int]
						<=
						[Local j(522):Int]
				[Block:Void]
					[While:Void]
						[Parenthesis:Bool]
							[Binop:Bool]
								[Binop:Bool]
									[Local i(521):Int]
									<
									[Local hi(518):Int]
								&&
								[Binop:Bool]
									[Call:Int]
										[Local f(519):Array.T -> Array.T -> Int]
										[Array:Array.T]
											[Local buf(520):cs.NativeArray<Array.T>]
											[Local i(521):Int]
										[Local p(523):Array.T]
									<
									[Const 0:Int]
						[Unop:Int]
							++
							Postfix
							[Local i(521):Int]
					[While:Void]
						[Parenthesis:Bool]
							[Binop:Bool]
								[Binop:Bool]
									[Local j(522):Int]
									>
									[Local lo(517):Int]
								&&
								[Binop:Bool]
									[Call:Int]
										[Local f(519):Array.T -> Array.T -> Int]
										[Array:Array.T]
											[Local buf(520):cs.NativeArray<Array.T>]
											[Local j(522):Int]
										[Local p(523):Array.T]
									>
									[Const 0:Int]
						[Unop:Int]
							--
							Postfix
							[Local j(522):Int]
					[If:Void]
						[Parenthesis:Bool]
							[Binop:Bool]
								[Local i(521):Int]
								<=
								[Local j(522):Int]
						[Then:Array.T] [Block:Array.T]
							[Var t(524):Array.T]
								[Array:Array.T]
									[Local buf(520):cs.NativeArray<Array.T>]
									[Local i(521):Int]
							[Binop:Array.T]
								[Array:Array.T]
									[Local buf(520):cs.NativeArray<Array.T>]
									[Unop:Int]
										++
										Postfix
										[Local i(521):Int]
								=
								[Array:Array.T]
									[Local buf(520):cs.NativeArray<Array.T>]
									[Local j(522):Int]
							[Binop:Array.T]
								[Array:Array.T]
									[Local buf(520):cs.NativeArray<Array.T>]
									[Unop:Int]
										--
										Postfix
										[Local j(522):Int]
								=
								[Local t(524):Array.T]
			[If:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Local lo(517):Int]
						<
						[Local j(522):Int]
				[Then:Void] [Call:Void]
					[Field:lo : Int -> hi : Int -> f : (Array.T -> Array.T -> Int) -> Void]
						[Const this:Array<Array.T>]
						[FInstance:lo : Int -> hi : Int -> f : (Array.T -> Array.T -> Int) -> Void]
							Array<Array.T>
							quicksort
					[Local lo(517):Int]
					[Local j(522):Int]
					[Local f(519):Array.T -> Array.T -> Int]
			[If:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Local i(521):Int]
						<
						[Local hi(518):Int]
				[Then:Void] [Call:Void]
					[Field:lo : Int -> hi : Int -> f : (Array.T -> Array.T -> Int) -> Void]
						[Const this:Array<Array.T>]
						[FInstance:lo : Int -> hi : Int -> f : (Array.T -> Array.T -> Int) -> Void]
							Array<Array.T>
							quicksort
					[Local i(521):Int]
					[Local hi(518):Int]
					[Local f(519):Array.T -> Array.T -> Int]

	public splice(method) : pos : Int -> len : Int -> Array<Array.T>

	 = [Function:pos : Int -> len : Int -> Array<Array.T>]
		[Arg:Int] [Local pos(525):Int]
		[Arg:Int] [Local len(526):Int]
		[Block:Dynamic]
			[If:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Local len(526):Int]
						<
						[Const 0:Int]
				[Then:Dynamic] [Return:Dynamic] [New:Array<Array.T>] Array<Array.T>
			[If:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Local pos(525):Int]
						<
						[Const 0:Int]
				[Then:Void] [Block:Void]
					[Binop:Int]
						[Local pos(525):Int]
						=
						[Binop:Int]
							[Field:Int]
								[Const this:Array<Array.T>]
								[FInstance:Int]
									Array<Array.T>
									length
							+
							[Local pos(525):Int]
					[If:Void]
						[Parenthesis:Bool]
							[Binop:Bool]
								[Local pos(525):Int]
								<
								[Const 0:Int]
						[Then:Int] [Binop:Int]
							[Local pos(525):Int]
							=
							[Const 0:Int]
			[If:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Local pos(525):Int]
						>
						[Field:Int]
							[Const this:Array<Array.T>]
							[FInstance:Int]
								Array<Array.T>
								length
				[Then:Int] [Block:Int]
					[Binop:Int]
						[Local pos(525):Int]
						=
						[Const 0:Int]
					[Binop:Int]
						[Local len(526):Int]
						=
						[Const 0:Int]
				[Else:Void] [If:Void]
					[Parenthesis:Bool]
						[Binop:Bool]
							[Binop:Int]
								[Local pos(525):Int]
								+
								[Local len(526):Int]
							>
							[Field:Int]
								[Const this:Array<Array.T>]
								[FInstance:Int]
									Array<Array.T>
									length
					[Then:Void] [Block:Void]
						[Binop:Int]
							[Local len(526):Int]
							=
							[Binop:Int]
								[Field:Int]
									[Const this:Array<Array.T>]
									[FInstance:Int]
										Array<Array.T>
										length
								-
								[Local pos(525):Int]
						[If:Void]
							[Parenthesis:Bool]
								[Binop:Bool]
									[Local len(526):Int]
									<
									[Const 0:Int]
							[Then:Int] [Binop:Int]
								[Local len(526):Int]
								=
								[Const 0:Int]
			[Var a(527):cs.NativeArray<Array.T>]
				[Field:cs.NativeArray<Array.T>]
					[Const this:Array<Array.T>]
					[FInstance:cs.NativeArray<Array.T>]
						Array<Array.T>
						__a
			[Var ret(528):cs.NativeArray<Array.T>]
				[New:cs.NativeArray<Array.T>]
					cs.NativeArray<Array.T>
					[Local len(526):Int]
			[Call:Void]
				[Field:sourceArray : System.Array -> sourceIndex : Int -> destinationArray : System.Array -> destinationIndex : Int -> length : Int -> Void]
					[TypeExpr System.Array:Class<cs.system.Array>]
					[FStatic:sourceArray : System.Array -> sourceIndex : Int -> destinationArray : System.Array -> destinationIndex : Int -> length : Int -> Void]
						System.Array
						Copy
				[Local a(527):cs.NativeArray<Array.T>]
				[Local pos(525):Int]
				[Local ret(528):cs.NativeArray<Array.T>]
				[Const 0:Int]
				[Local len(526):Int]
			[Var ret1(541):Array<Array.T>]
				[New:Array<Array.T>]
					Array<Array.T>
					[Local ret(528):cs.NativeArray<Array.T>]
			[Var end(542):Int]
				[Binop:Int]
					[Local pos(525):Int]
					+
					[Local len(526):Int]
			[Call:Void]
				[Field:sourceArray : System.Array -> sourceIndex : Int -> destinationArray : System.Array -> destinationIndex : Int -> length : Int -> Void]
					[TypeExpr System.Array:Class<cs.system.Array>]
					[FStatic:sourceArray : System.Array -> sourceIndex : Int -> destinationArray : System.Array -> destinationIndex : Int -> length : Int -> Void]
						System.Array
						Copy
				[Local a(527):cs.NativeArray<Array.T>]
				[Local end(542):Int]
				[Local a(527):cs.NativeArray<Array.T>]
				[Local pos(525):Int]
				[Binop:Int]
					[Field:Int]
						[Const this:Array<Array.T>]
						[FInstance:Int]
							Array<Array.T>
							length
					-
					[Local end(542):Int]
			[Binop:Int]
				[Field:Int]
					[Const this:Array<Array.T>]
					[FInstance:Int]
						Array<Array.T>
						length
				-=
				[Local len(526):Int]
			[While:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Unop:Int]
							--
							Prefix
							[Local len(526):Int]
						>=
						[Const 0:Int]
				[Binop:Array.T]
					[Array:Array.T]
						[Local a(527):cs.NativeArray<Array.T>]
						[Binop:Int]
							[Field:Int]
								[Const this:Array<Array.T>]
								[FInstance:Int]
									Array<Array.T>
									length
							+
							[Local len(526):Int]
					=
					[Const null:Array.T]
			[Return:Dynamic] [Local ret1(541):Array<Array.T>]

	spliceVoid(method) : pos : Int -> len : Int -> Void

	 = [Function:pos : Int -> len : Int -> Void]
		[Arg:Int] [Local pos(552):Int]
		[Arg:Int] [Local len(553):Int]
		[Block:Void]
			[If:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Local len(553):Int]
						<
						[Const 0:Int]
				[Then:Dynamic] [Return:Dynamic]
			[If:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Local pos(552):Int]
						<
						[Const 0:Int]
				[Then:Void] [Block:Void]
					[Binop:Int]
						[Local pos(552):Int]
						=
						[Binop:Int]
							[Field:Int]
								[Const this:Array<Array.T>]
								[FInstance:Int]
									Array<Array.T>
									length
							+
							[Local pos(552):Int]
					[If:Void]
						[Parenthesis:Bool]
							[Binop:Bool]
								[Local pos(552):Int]
								<
								[Const 0:Int]
						[Then:Int] [Binop:Int]
							[Local pos(552):Int]
							=
							[Const 0:Int]
			[If:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Local pos(552):Int]
						>
						[Field:Int]
							[Const this:Array<Array.T>]
							[FInstance:Int]
								Array<Array.T>
								length
				[Then:Int] [Block:Int]
					[Binop:Int]
						[Local pos(552):Int]
						=
						[Const 0:Int]
					[Binop:Int]
						[Local len(553):Int]
						=
						[Const 0:Int]
				[Else:Void] [If:Void]
					[Parenthesis:Bool]
						[Binop:Bool]
							[Binop:Int]
								[Local pos(552):Int]
								+
								[Local len(553):Int]
							>
							[Field:Int]
								[Const this:Array<Array.T>]
								[FInstance:Int]
									Array<Array.T>
									length
					[Then:Void] [Block:Void]
						[Binop:Int]
							[Local len(553):Int]
							=
							[Binop:Int]
								[Field:Int]
									[Const this:Array<Array.T>]
									[FInstance:Int]
										Array<Array.T>
										length
								-
								[Local pos(552):Int]
						[If:Void]
							[Parenthesis:Bool]
								[Binop:Bool]
									[Local len(553):Int]
									<
									[Const 0:Int]
							[Then:Int] [Binop:Int]
								[Local len(553):Int]
								=
								[Const 0:Int]
			[Var a(554):cs.NativeArray<Array.T>]
				[Field:cs.NativeArray<Array.T>]
					[Const this:Array<Array.T>]
					[FInstance:cs.NativeArray<Array.T>]
						Array<Array.T>
						__a
			[Var end(555):Int]
				[Binop:Int]
					[Local pos(552):Int]
					+
					[Local len(553):Int]
			[Call:Void]
				[Field:sourceArray : System.Array -> sourceIndex : Int -> destinationArray : System.Array -> destinationIndex : Int -> length : Int -> Void]
					[TypeExpr System.Array:Class<cs.system.Array>]
					[FStatic:sourceArray : System.Array -> sourceIndex : Int -> destinationArray : System.Array -> destinationIndex : Int -> length : Int -> Void]
						System.Array
						Copy
				[Local a(554):cs.NativeArray<Array.T>]
				[Local end(555):Int]
				[Local a(554):cs.NativeArray<Array.T>]
				[Local pos(552):Int]
				[Binop:Int]
					[Field:Int]
						[Const this:Array<Array.T>]
						[FInstance:Int]
							Array<Array.T>
							length
					-
					[Local end(555):Int]
			[Binop:Int]
				[Field:Int]
					[Const this:Array<Array.T>]
					[FInstance:Int]
						Array<Array.T>
						length
				-=
				[Local len(553):Int]
			[While:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Unop:Int]
							--
							Prefix
							[Local len(553):Int]
						>=
						[Const 0:Int]
				[Binop:Array.T]
					[Array:Array.T]
						[Local a(554):cs.NativeArray<Array.T>]
						[Binop:Int]
							[Field:Int]
								[Const this:Array<Array.T>]
								[FInstance:Int]
									Array<Array.T>
									length
							+
							[Local len(553):Int]
					=
					[Const null:Array.T]

	public toString(method) : Void -> String

	 = [Function:Void -> String]
		[Block:Dynamic]
			[Var ret_b(8897):System.Text.StringBuilder] [New:System.Text.StringBuilder] System.Text.StringBuilder
			[Var a(566):cs.NativeArray<Array.T>]
				[Field:cs.NativeArray<Array.T>]
					[Const this:Array<Array.T>]
					[FInstance:cs.NativeArray<Array.T>]
						Array<Array.T>
						__a
			[Call:System.Text.StringBuilder]
				[Field:value : String -> System.Text.StringBuilder]
					[Local ret_b(8897):System.Text.StringBuilder]
					[FInstance:value : String -> System.Text.StringBuilder]
						System.Text.StringBuilder
						Append
				[Const "[":String]
			[Var first(570):Bool] [Const true:Bool]
			[Block:Void]
				[Var _g1(572):Int] [Const 0:Int]
				[Var _g(571):Int]
					[Field:Int]
						[Const this:Array<Array.T>]
						[FInstance:Int]
							Array<Array.T>
							length
				[While:Void]
					[Parenthesis:Bool]
						[Binop:Bool]
							[Local _g1(572):Int]
							<
							[Local _g(571):Int]
					[Block:Void]
						[Var i(573):Int]
							[Unop:Int]
								++
								Postfix
								[Local _g1(572):Int]
						[If:Void]
							[Parenthesis:Bool] [Local first(570):Bool]
							[Then:Bool] [Binop:Bool]
								[Local first(570):Bool]
								=
								[Const false:Bool]
							[Else:System.Text.StringBuilder] [Call:System.Text.StringBuilder]
								[Field:value : String -> System.Text.StringBuilder]
									[Local ret_b(8897):System.Text.StringBuilder]
									[FInstance:value : String -> System.Text.StringBuilder]
										System.Text.StringBuilder
										Append
								[Const ",":String]
						[Call:System.Text.StringBuilder]
							[Field:value : String -> System.Text.StringBuilder]
								[Local ret_b(8897):System.Text.StringBuilder]
								[FInstance:value : String -> System.Text.StringBuilder]
									System.Text.StringBuilder
									Append
							[Call:String]
								[Field:s : Dynamic -> String]
									[TypeExpr Std:Class<Std>]
									[FStatic:s : Dynamic -> String]
										Std
										string
								[Array:Array.T]
									[Local a(566):cs.NativeArray<Array.T>]
									[Local i(573):Int]
			[Call:System.Text.StringBuilder]
				[Field:value : String -> System.Text.StringBuilder]
					[Local ret_b(8897):System.Text.StringBuilder]
					[FInstance:value : String -> System.Text.StringBuilder]
						System.Text.StringBuilder
						Append
				[Const "]":String]
			[Return:Dynamic]
				[Call:String]
					[Field:Void -> String]
						[Local ret_b(8897):System.Text.StringBuilder]
						[FInstance:Void -> String]
							System.Text.StringBuilder
							ToString

	public unshift(method) : x : Array.T -> Void

	 = [Function:x : Array.T -> Void]
		[Arg:Array.T] [Local x(587):Array.T]
		[Block:Int]
			[Var __a(588):cs.NativeArray<Array.T>]
				[Field:cs.NativeArray<Array.T>]
					[Const this:Array<Array.T>]
					[FInstance:cs.NativeArray<Array.T>]
						Array<Array.T>
						__a
			[Var length(589):Int]
				[Field:Int]
					[Const this:Array<Array.T>]
					[FInstance:Int]
						Array<Array.T>
						length
			[If:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Local length(589):Int]
						>=
						[Call:Int]
							[Field:Void -> Int]
								[Local __a(588):cs.NativeArray<Array.T>]
								[FInstance:Void -> Int]
									System.Array
									get_Length
				[Then:cs.NativeArray<Array.T>] [Block:cs.NativeArray<Array.T>]
					[Var newLen(590):Int]
						[Binop:Int]
							[Parenthesis:Int]
								[Binop:Int]
									[Local length(589):Int]
									<<
									[Const 1:Int]
							+
							[Const 1:Int]
					[Var newarr(591):cs.NativeArray<Array.T>]
						[New:cs.NativeArray<Array.T>]
							cs.NativeArray<Array.T>
							[Local newLen(590):Int]
					[Call:Void]
						[Field:sourceArray : System.Array -> sourceIndex : Int -> destinationArray : System.Array -> destinationIndex : Int -> length : Int -> Void]
							[TypeExpr System.Array:Class<cs.system.Array>]
							[FStatic:sourceArray : System.Array -> sourceIndex : Int -> destinationArray : System.Array -> destinationIndex : Int -> length : Int -> Void]
								System.Array
								Copy
						[Local __a(588):cs.NativeArray<Array.T>]
						[Const 0:Int]
						[Local newarr(591):cs.NativeArray<Array.T>]
						[Const 1:Int]
						[Local length(589):Int]
					[Binop:cs.NativeArray<Array.T>]
						[Field:cs.NativeArray<Array.T>]
							[Const this:Array<Array.T>]
							[FInstance:cs.NativeArray<Array.T>]
								Array<Array.T>
								__a
						=
						[Local newarr(591):cs.NativeArray<Array.T>]
				[Else:Void] [Call:Void]
					[Field:sourceArray : System.Array -> sourceIndex : Int -> destinationArray : System.Array -> destinationIndex : Int -> length : Int -> Void]
						[TypeExpr System.Array:Class<cs.system.Array>]
						[FStatic:sourceArray : System.Array -> sourceIndex : Int -> destinationArray : System.Array -> destinationIndex : Int -> length : Int -> Void]
							System.Array
							Copy
					[Local __a(588):cs.NativeArray<Array.T>]
					[Const 0:Int]
					[Local __a(588):cs.NativeArray<Array.T>]
					[Const 1:Int]
					[Local length(589):Int]
			[Binop:Array.T]
				[Array:Array.T]
					[Field:cs.NativeArray<Array.T>]
						[Const this:Array<Array.T>]
						[FInstance:cs.NativeArray<Array.T>]
							Array<Array.T>
							__a
					[Const 0:Int]
				=
				[Local x(587):Array.T]
			[Unop:Int]
				++
				Prefix
				[Field:Int]
					[Const this:Array<Array.T>]
					[FInstance:Int]
						Array<Array.T>
						length

	public insert(method) : pos : Int -> x : Array.T -> Void

	 = [Function:pos : Int -> x : Array.T -> Void]
		[Arg:Int] [Local pos(610):Int]
		[Arg:Array.T] [Local x(611):Array.T]
		[Block:Void]
			[Var l(612):Int]
				[Field:Int]
					[Const this:Array<Array.T>]
					[FInstance:Int]
						Array<Array.T>
						length
			[If:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Local pos(610):Int]
						<
						[Const 0:Int]
				[Then:Void] [Block:Void]
					[Binop:Int]
						[Local pos(610):Int]
						=
						[Binop:Int]
							[Local l(612):Int]
							+
							[Local pos(610):Int]
					[If:Void]
						[Parenthesis:Bool]
							[Binop:Bool]
								[Local pos(610):Int]
								<
								[Const 0:Int]
						[Then:Int] [Binop:Int]
							[Local pos(610):Int]
							=
							[Const 0:Int]
			[If:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Local pos(610):Int]
						>=
						[Local l(612):Int]
				[Then:Dynamic] [Block:Dynamic]
					[Call:Int]
						[Field:x : Array.T -> Int]
							[Const this:Array<Array.T>]
							[FInstance:x : Array.T -> Int]
								Array<Array.T>
								push
						[Local x(611):Array.T]
					[Return:Dynamic]
				[Else:Void] [If:Void]
					[Parenthesis:Bool]
						[Binop:Bool]
							[Local pos(610):Int]
							==
							[Const 0:Int]
					[Then:Dynamic] [Block:Dynamic]
						[Call:Void]
							[Field:x : Array.T -> Void]
								[Const this:Array<Array.T>]
								[FInstance:x : Array.T -> Void]
									Array<Array.T>
									unshift
							[Local x(611):Array.T]
						[Return:Dynamic]
			[If:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Local l(612):Int]
						>=
						[Call:Int]
							[Field:Void -> Int]
								[Field:cs.NativeArray<Array.T>]
									[Const this:Array<Array.T>]
									[FInstance:cs.NativeArray<Array.T>]
										Array<Array.T>
										__a
								[FInstance:Void -> Int]
									System.Array
									get_Length
				[Then:Int] [Block:Int]
					[Var newLen(613):Int]
						[Binop:Int]
							[Parenthesis:Int]
								[Binop:Int]
									[Field:Int]
										[Const this:Array<Array.T>]
										[FInstance:Int]
											Array<Array.T>
											length
									<<
									[Const 1:Int]
							+
							[Const 1:Int]
					[Var newarr(614):cs.NativeArray<Array.T>]
						[New:cs.NativeArray<Array.T>]
							cs.NativeArray<Array.T>
							[Local newLen(613):Int]
					[Call:Void]
						[Field:sourceArray : System.Array -> sourceIndex : Int -> destinationArray : System.Array -> destinationIndex : Int -> length : Int -> Void]
							[TypeExpr System.Array:Class<cs.system.Array>]
							[FStatic:sourceArray : System.Array -> sourceIndex : Int -> destinationArray : System.Array -> destinationIndex : Int -> length : Int -> Void]
								System.Array
								Copy
						[Field:cs.NativeArray<Array.T>]
							[Const this:Array<Array.T>]
							[FInstance:cs.NativeArray<Array.T>]
								Array<Array.T>
								__a
						[Const 0:Int]
						[Local newarr(614):cs.NativeArray<Array.T>]
						[Const 0:Int]
						[Local pos(610):Int]
					[Binop:Array.T]
						[Array:Array.T]
							[Local newarr(614):cs.NativeArray<Array.T>]
							[Local pos(610):Int]
						=
						[Local x(611):Array.T]
					[Call:Void]
						[Field:sourceArray : System.Array -> sourceIndex : Int -> destinationArray : System.Array -> destinationIndex : Int -> length : Int -> Void]
							[TypeExpr System.Array:Class<cs.system.Array>]
							[FStatic:sourceArray : System.Array -> sourceIndex : Int -> destinationArray : System.Array -> destinationIndex : Int -> length : Int -> Void]
								System.Array
								Copy
						[Field:cs.NativeArray<Array.T>]
							[Const this:Array<Array.T>]
							[FInstance:cs.NativeArray<Array.T>]
								Array<Array.T>
								__a
						[Local pos(610):Int]
						[Local newarr(614):cs.NativeArray<Array.T>]
						[Binop:Int]
							[Local pos(610):Int]
							+
							[Const 1:Int]
						[Binop:Int]
							[Local l(612):Int]
							-
							[Local pos(610):Int]
					[Binop:cs.NativeArray<Array.T>]
						[Field:cs.NativeArray<Array.T>]
							[Const this:Array<Array.T>]
							[FInstance:cs.NativeArray<Array.T>]
								Array<Array.T>
								__a
						=
						[Local newarr(614):cs.NativeArray<Array.T>]
					[Unop:Int]
						++
						Prefix
						[Field:Int]
							[Const this:Array<Array.T>]
							[FInstance:Int]
								Array<Array.T>
								length
				[Else:Int] [Block:Int]
					[Var __a(633):cs.NativeArray<Array.T>]
						[Field:cs.NativeArray<Array.T>]
							[Const this:Array<Array.T>]
							[FInstance:cs.NativeArray<Array.T>]
								Array<Array.T>
								__a
					[Call:Void]
						[Field:sourceArray : System.Array -> sourceIndex : Int -> destinationArray : System.Array -> destinationIndex : Int -> length : Int -> Void]
							[TypeExpr System.Array:Class<cs.system.Array>]
							[FStatic:sourceArray : System.Array -> sourceIndex : Int -> destinationArray : System.Array -> destinationIndex : Int -> length : Int -> Void]
								System.Array
								Copy
						[Local __a(633):cs.NativeArray<Array.T>]
						[Local pos(610):Int]
						[Local __a(633):cs.NativeArray<Array.T>]
						[Binop:Int]
							[Local pos(610):Int]
							+
							[Const 1:Int]
						[Binop:Int]
							[Local l(612):Int]
							-
							[Local pos(610):Int]
					[Call:Void]
						[Field:sourceArray : System.Array -> sourceIndex : Int -> destinationArray : System.Array -> destinationIndex : Int -> length : Int -> Void]
							[TypeExpr System.Array:Class<cs.system.Array>]
							[FStatic:sourceArray : System.Array -> sourceIndex : Int -> destinationArray : System.Array -> destinationIndex : Int -> length : Int -> Void]
								System.Array
								Copy
						[Local __a(633):cs.NativeArray<Array.T>]
						[Const 0:Int]
						[Local __a(633):cs.NativeArray<Array.T>]
						[Const 0:Int]
						[Local pos(610):Int]
					[Binop:Array.T]
						[Array:Array.T]
							[Local __a(633):cs.NativeArray<Array.T>]
							[Local pos(610):Int]
						=
						[Local x(611):Array.T]
					[Unop:Int]
						++
						Prefix
						[Field:Int]
							[Const this:Array<Array.T>]
							[FInstance:Int]
								Array<Array.T>
								length

	public remove(method) : x : Array.T -> Bool

	 = [Function:x : Array.T -> Bool]
		[Arg:Array.T] [Local x(652):Array.T]
		[Block:Dynamic]
			[Var __a(653):cs.NativeArray<Array.T>]
				[Field:cs.NativeArray<Array.T>]
					[Const this:Array<Array.T>]
					[FInstance:cs.NativeArray<Array.T>]
						Array<Array.T>
						__a
			[Var i(654):Int] [Const -1:Int]
			[Var length(655):Int]
				[Field:Int]
					[Const this:Array<Array.T>]
					[FInstance:Int]
						Array<Array.T>
						length
			[While:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Unop:Int]
							++
							Prefix
							[Local i(654):Int]
						<
						[Local length(655):Int]
				[If:Void]
					[Parenthesis:Bool]
						[Binop:Bool]
							[Array:Array.T]
								[Local __a(653):cs.NativeArray<Array.T>]
								[Local i(654):Int]
							==
							[Local x(652):Array.T]
					[Then:Dynamic] [Block:Dynamic]
						[Call:Void]
							[Field:sourceArray : System.Array -> sourceIndex : Int -> destinationArray : System.Array -> destinationIndex : Int -> length : Int -> Void]
								[TypeExpr System.Array:Class<cs.system.Array>]
								[FStatic:sourceArray : System.Array -> sourceIndex : Int -> destinationArray : System.Array -> destinationIndex : Int -> length : Int -> Void]
									System.Array
									Copy
							[Local __a(653):cs.NativeArray<Array.T>]
							[Binop:Int]
								[Local i(654):Int]
								+
								[Const 1:Int]
							[Local __a(653):cs.NativeArray<Array.T>]
							[Local i(654):Int]
							[Binop:Int]
								[Binop:Int]
									[Local length(655):Int]
									-
									[Local i(654):Int]
								-
								[Const 1:Int]
						[Binop:Array.T]
							[Array:Array.T]
								[Local __a(653):cs.NativeArray<Array.T>]
								[Unop:Int]
									--
									Prefix
									[Field:Int]
										[Const this:Array<Array.T>]
										[FInstance:Int]
											Array<Array.T>
											length
							=
							[Const null:Array.T]
						[Return:Dynamic] [Const true:Bool]
			[Return:Dynamic] [Const false:Bool]

	public map<S : map.S>(method) : f : (Array.T -> map.S) -> Array<map.S>

	 = [Function:f : (Array.T -> map.S) -> Array<map.S>]
		[Arg:Array.T -> map.S] [Local f(665):Array.T -> map.S]
		[Block:Dynamic]
			[Var ret(666):Array<map.S>] [ArrayDecl:Array<map.S>]
			[Block:Void]
				[Var _g(668):Int] [Const 0:Int]
				[Var _g1(669):Array<Array.T>] [Const this:Array<Array.T>]
				[While:Void]
					[Parenthesis:Bool]
						[Binop:Bool]
							[Local _g(668):Int]
							<
							[Field:Int]
								[Local _g1(669):Array<Array.T>]
								[FInstance:Int]
									Array<Array.T>
									length
					[Block:Void]
						[Var elt(667):Array.T]
							[Array:Array.T]
								[Local _g1(669):Array<Array.T>]
								[Local _g(668):Int]
						[Unop:Int]
							++
							Prefix
							[Local _g(668):Int]
						[Call:Int]
							[Field:x : map.S -> Int]
								[Local ret(666):Array<map.S>]
								[FInstance:x : map.S -> Int]
									Array<map.S>
									push
							[Call:map.S]
								[Local f(665):Array.T -> map.S]
								[Local elt(667):Array.T]
			[Return:Dynamic] [Local ret(666):Array<map.S>]

	public filter(method) : f : (Array.T -> Bool) -> Array<Array.T>

	 = [Function:f : (Array.T -> Bool) -> Array<Array.T>]
		[Arg:Array.T -> Bool] [Local f(670):Array.T -> Bool]
		[Block:Dynamic]
			[Var ret(671):Array<Array.T>] [ArrayDecl:Array<Array.T>]
			[Block:Void]
				[Var _g(673):Int] [Const 0:Int]
				[Var _g1(674):Array<Array.T>] [Const this:Array<Array.T>]
				[While:Void]
					[Parenthesis:Bool]
						[Binop:Bool]
							[Local _g(673):Int]
							<
							[Field:Int]
								[Local _g1(674):Array<Array.T>]
								[FInstance:Int]
									Array<Array.T>
									length
					[Block:Void]
						[Var elt(672):Array.T]
							[Array:Array.T]
								[Local _g1(674):Array<Array.T>]
								[Local _g(673):Int]
						[Unop:Int]
							++
							Prefix
							[Local _g(673):Int]
						[If:Void]
							[Parenthesis:Bool]
								[Call:Bool]
									[Local f(670):Array.T -> Bool]
									[Local elt(672):Array.T]
							[Then:Int] [Call:Int]
								[Field:x : Array.T -> Int]
									[Local ret(671):Array<Array.T>]
									[FInstance:x : Array.T -> Int]
										Array<Array.T>
										push
								[Local elt(672):Array.T]
			[Return:Dynamic] [Local ret(671):Array<Array.T>]

	public copy(method) : Void -> Array<Array.T>

	 = [Function:Void -> Array<Array.T>]
		[Block:Dynamic]
			[Var len(675):Int]
				[Field:Int]
					[Const this:Array<Array.T>]
					[FInstance:Int]
						Array<Array.T>
						length
			[Var __a(676):cs.NativeArray<Array.T>]
				[Field:cs.NativeArray<Array.T>]
					[Const this:Array<Array.T>]
					[FInstance:cs.NativeArray<Array.T>]
						Array<Array.T>
						__a
			[Var newarr(677):cs.NativeArray<Array.T>]
				[New:cs.NativeArray<Array.T>]
					cs.NativeArray<Array.T>
					[Local len(675):Int]
			[Call:Void]
				[Field:sourceArray : System.Array -> sourceIndex : Int -> destinationArray : System.Array -> destinationIndex : Int -> length : Int -> Void]
					[TypeExpr System.Array:Class<cs.system.Array>]
					[FStatic:sourceArray : System.Array -> sourceIndex : Int -> destinationArray : System.Array -> destinationIndex : Int -> length : Int -> Void]
						System.Array
						Copy
				[Local __a(676):cs.NativeArray<Array.T>]
				[Const 0:Int]
				[Local newarr(677):cs.NativeArray<Array.T>]
				[Const 0:Int]
				[Local len(675):Int]
			[Return:Dynamic]
				[New:Array<Array.T>]
					Array<Array.T>
					[Local newarr(677):cs.NativeArray<Array.T>]

	public iterator(inline method) : Void -> Iterator<Array.T>

	 = [Function:Void -> Iterator<Array.T>]
		[Block:Dynamic]
			[Return:Dynamic]
				[New:_Array.ArrayIterator<Array.T>]
					_Array.ArrayIterator<Array.T>
					[Const this:Array<Array.T>]

	__get(method) : idx : Int -> Array.T

	 = [Function:idx : Int -> Array.T]
		[Arg:Int] [Local idx(691):Int]
		[Block:Dynamic]
			[If:Array.T]
				[Parenthesis:Bool]
					[Cast:Bool]
						[Binop:Bool]
							[Cast:UInt] [Cast:UInt] [Local idx(691):Int]
							>=
							[Field:Int]
								[Const this:Array<Array.T>]
								[FInstance:Int]
									Array<Array.T>
									length
				[Then:Dynamic] [Return:Dynamic] [Const null:Array.T]
				[Else:Dynamic] [Return:Dynamic]
					[Array:Array.T]
						[Field:cs.NativeArray<Array.T>]
							[Const this:Array<Array.T>]
							[FInstance:cs.NativeArray<Array.T>]
								Array<Array.T>
								__a
						[Local idx(691):Int]

	__set(method) : idx : Int -> v : Array.T -> Array.T

	 = [Function:idx : Int -> v : Array.T -> Array.T]
		[Arg:Int] [Local idx(692):Int]
		[Arg:Array.T] [Local v(693):Array.T]
		[Block:Dynamic]
			[Var idx1(694):UInt] [Local idx(692):Int]
			[Var __a(695):cs.NativeArray<Array.T>]
				[Field:cs.NativeArray<Array.T>]
					[Const this:Array<Array.T>]
					[FInstance:cs.NativeArray<Array.T>]
						Array<Array.T>
						__a
			[If:Void]
				[Parenthesis:Bool]
					[Cast:Bool]
						[Binop:Bool]
							[Local idx1(694):UInt]
							>=
							[Call:Int]
								[Field:Void -> Int]
									[Local __a(695):cs.NativeArray<Array.T>]
									[FInstance:Void -> Int]
										System.Array
										get_Length
				[Then:cs.NativeArray<Array.T>] [Block:cs.NativeArray<Array.T>]
					[Var len(696):UInt]
						[Cast:UInt]
							[Binop:UInt]
								[Local idx1(694):UInt]
								+
								[Const 1:Int]
					[If:Void]
						[Parenthesis:Bool]
							[Cast:Bool]
								[Binop:Bool]
									[Local idx1(694):UInt]
									==
									[Call:Int]
										[Field:Void -> Int]
											[Local __a(695):cs.NativeArray<Array.T>]
											[FInstance:Void -> Int]
												System.Array
												get_Length
						[Then:UInt] [Binop:UInt]
							[Local len(696):UInt]
							=
							[Cast:UInt]
								[Binop:UInt]
									[Parenthesis:UInt]
										[Cast:UInt]
											[Binop:UInt]
												[Local idx1(694):UInt]
												<<
												[Const 1:Int]
									+
									[Const 1:Int]
					[Var newArr(697):cs.NativeArray<Array.T>]
						[New:cs.NativeArray<Array.T>]
							cs.NativeArray<Array.T>
							[Local len(696):UInt]
					[Call:Void]
						[Field:array : System.Array -> index : Int -> Void]
							[Local __a(695):cs.NativeArray<Array.T>]
							[FInstance:array : System.Array -> index : Int -> Void]
								System.Array
								CopyTo
						[Local newArr(697):cs.NativeArray<Array.T>]
						[Const 0:Int]
					[Binop:cs.NativeArray<Array.T>]
						[Field:cs.NativeArray<Array.T>]
							[Const this:Array<Array.T>]
							[FInstance:cs.NativeArray<Array.T>]
								Array<Array.T>
								__a
						=
						[Binop:cs.NativeArray<Array.T>]
							[Local __a(695):cs.NativeArray<Array.T>]
							=
							[Local newArr(697):cs.NativeArray<Array.T>]
			[If:Void]
				[Parenthesis:Bool]
					[Cast:Bool]
						[Binop:Bool]
							[Local idx1(694):UInt]
							>=
							[Field:Int]
								[Const this:Array<Array.T>]
								[FInstance:Int]
									Array<Array.T>
									length
				[Then:Int] [Binop:Int]
					[Field:Int]
						[Const this:Array<Array.T>]
						[FInstance:Int]
							Array<Array.T>
							length
					=
					[Cast:UInt]
						[Binop:UInt]
							[Local idx1(694):UInt]
							+
							[Const 1:Int]
			[Return:Dynamic]
				[Binop:Array.T]
					[Array:Array.T]
						[Local __a(695):cs.NativeArray<Array.T>]
						[Local idx1(694):UInt]
					=
					[Local v(693):Array.T]

	__unsafe_get(inline method) : idx : Int -> Array.T

	 = [Function:idx : Int -> Array.T]
		[Arg:Int] [Local idx(701):Int]
		[Block:Dynamic]
			[Return:Dynamic]
				[Array:Array.T]
					[Field:cs.NativeArray<Array.T>]
						[Const this:Array<Array.T>]
						[FInstance:cs.NativeArray<Array.T>]
							Array<Array.T>
							__a
					[Local idx(701):Int]

	__unsafe_set(inline method) : idx : Int -> val : Array.T -> Array.T

	 = [Function:idx : Int -> val : Array.T -> Array.T]
		[Arg:Int] [Local idx(702):Int]
		[Arg:Array.T] [Local val(703):Array.T]
		[Block:Dynamic]
			[Return:Dynamic]
				[Binop:Array.T]
					[Array:Array.T]
						[Field:cs.NativeArray<Array.T>]
							[Const this:Array<Array.T>]
							[FInstance:cs.NativeArray<Array.T>]
								Array<Array.T>
								__a
						[Local idx(702):Int]
					=
					[Local val(703):Array.T]

	static ofNative<X : ofNative.X>(inline method) : native : cs.NativeArray<ofNative.X> -> Array<ofNative.X>

	 = [Function:native : cs.NativeArray<ofNative.X> -> Array<ofNative.X>]
		[Arg:cs.NativeArray<ofNative.X>] [Local native(390):cs.NativeArray<ofNative.X>]
		[Block:Dynamic]
			[Return:Dynamic]
				[New:Array<ofNative.X>]
					Array<ofNative.X>
					[Local native(390):cs.NativeArray<ofNative.X>]

	static alloc<Y : alloc.Y>(inline method) : size : Int -> Array<alloc.Y>

	 = [Function:size : Int -> Array<alloc.Y>]
		[Arg:Int] [Local size(392):Int]
		[Block:Dynamic]
			[Return:Dynamic]
				[New:Array<alloc.Y>]
					Array<alloc.Y>
					[New:cs.NativeArray<alloc.Y>]
						cs.NativeArray<alloc.Y>
						[Local size(392):Int]

}