extern class System.Reflection.Emit.EnumBuilder extends System.Type implements System.Runtime.InteropServices._EnumBuilder{
	public UnderlyingSystemType((get,never)) : System.Type

	public UnderlyingField((get,never)) : System.Reflection.Emit.FieldBuilder

	public TypeToken((get,never)) : System.Reflection.Emit.TypeToken

	public TypeHandle((get,never)) : System.RuntimeTypeHandle

	public ReflectedType((get,never)) : System.Type

	public Namespace((get,never)) : String

	public Name((get,never)) : String

	public Module((get,never)) : System.Reflection.Module

	public GUID((get,never)) : System.Guid

	public FullName((get,never)) : String

	public DeclaringType((get,never)) : System.Type

	public BaseType((get,never)) : System.Type

	public AssemblyQualifiedName((get,never)) : String

	public Assembly((get,never)) : System.Reflection.Assembly

	get_Assembly(method) : Void -> System.Reflection.Assembly

	get_AssemblyQualifiedName(method) : Void -> String

	get_BaseType(method) : Void -> System.Type

	get_DeclaringType(method) : Void -> System.Type

	get_FullName(method) : Void -> String

	get_GUID(method) : Void -> System.Guid

	get_Module(method) : Void -> System.Reflection.Module

	get_Name(method) : Void -> String

	get_Namespace(method) : Void -> String

	get_ReflectedType(method) : Void -> System.Type

	get_TypeHandle(method) : Void -> System.RuntimeTypeHandle

	get_TypeToken(method) : Void -> System.Reflection.Emit.TypeToken

	get_UnderlyingField(method) : Void -> System.Reflection.Emit.FieldBuilder

	get_UnderlyingSystemType(method) : Void -> System.Type

	public CreateType(method) : Void -> System.Type

	public GetEnumUnderlyingType(method) : Void -> System.Type

	public DefineLiteral(method) : literalName : String -> literalValue : Dynamic -> System.Reflection.Emit.FieldBuilder

	GetAttributeFlagsImpl(method) : Void -> System.Reflection.TypeAttributes

	GetConstructorImpl(method) : bindingAttr : System.Reflection.BindingFlags -> binder : System.Reflection.Binder -> callConvention : System.Reflection.CallingConventions -> types : cs.NativeArray<System.Type> -> modifiers : cs.NativeArray<System.Reflection.ParameterModifier> -> System.Reflection.ConstructorInfo

	public GetConstructors(method) : bindingAttr : System.Reflection.BindingFlags -> cs.NativeArray<System.Reflection.ConstructorInfo>

	public GetCustomAttributes(method) : inherit : Bool -> cs.NativeArray<Dynamic>

	public GetCustomAttributes(method) : attributeType : System.Type -> inherit : Bool -> cs.NativeArray<Dynamic>

	public GetElementType(method) : Void -> System.Type

	public GetEvent(method) : name : String -> bindingAttr : System.Reflection.BindingFlags -> System.Reflection.EventInfo

	public GetEvents(method) : Void -> cs.NativeArray<System.Reflection.EventInfo>

	public GetEvents(method) : bindingAttr : System.Reflection.BindingFlags -> cs.NativeArray<System.Reflection.EventInfo>

	public GetField(method) : name : String -> bindingAttr : System.Reflection.BindingFlags -> System.Reflection.FieldInfo

	public GetFields(method) : bindingAttr : System.Reflection.BindingFlags -> cs.NativeArray<System.Reflection.FieldInfo>

	public GetInterface(method) : name : String -> ignoreCase : Bool -> System.Type

	public GetInterfaceMap(method) : interfaceType : System.Type -> System.Reflection.InterfaceMapping

	public GetInterfaces(method) : Void -> cs.NativeArray<System.Type>

	public GetMember(method) : name : String -> type : System.Reflection.MemberTypes -> bindingAttr : System.Reflection.BindingFlags -> cs.NativeArray<System.Reflection.MemberInfo>

	public GetMembers(method) : bindingAttr : System.Reflection.BindingFlags -> cs.NativeArray<System.Reflection.MemberInfo>

	GetMethodImpl(method) : name : String -> bindingAttr : System.Reflection.BindingFlags -> binder : System.Reflection.Binder -> callConvention : System.Reflection.CallingConventions -> types : cs.NativeArray<System.Type> -> modifiers : cs.NativeArray<System.Reflection.ParameterModifier> -> System.Reflection.MethodInfo

	public GetMethods(method) : bindingAttr : System.Reflection.BindingFlags -> cs.NativeArray<System.Reflection.MethodInfo>

	public GetNestedType(method) : name : String -> bindingAttr : System.Reflection.BindingFlags -> System.Type

	public GetNestedTypes(method) : bindingAttr : System.Reflection.BindingFlags -> cs.NativeArray<System.Type>

	public GetProperties(method) : bindingAttr : System.Reflection.BindingFlags -> cs.NativeArray<System.Reflection.PropertyInfo>

	GetPropertyImpl(method) : name : String -> bindingAttr : System.Reflection.BindingFlags -> binder : System.Reflection.Binder -> returnType : System.Type -> types : cs.NativeArray<System.Type> -> modifiers : cs.NativeArray<System.Reflection.ParameterModifier> -> System.Reflection.PropertyInfo

	HasElementTypeImpl(method) : Void -> Bool

	public InvokeMember(method) : name : String -> invokeAttr : System.Reflection.BindingFlags -> binder : System.Reflection.Binder -> target : Dynamic -> args : cs.NativeArray<Dynamic> -> modifiers : cs.NativeArray<System.Reflection.ParameterModifier> -> culture : System.Globalization.CultureInfo -> namedParameters : cs.NativeArray<String> -> Dynamic

	IsArrayImpl(method) : Void -> Bool

	IsByRefImpl(method) : Void -> Bool

	IsCOMObjectImpl(method) : Void -> Bool

	IsPointerImpl(method) : Void -> Bool

	IsPrimitiveImpl(method) : Void -> Bool

	IsValueTypeImpl(method) : Void -> Bool

	public IsDefined(method) : attributeType : System.Type -> inherit : Bool -> Bool

	public MakeArrayType(method) : Void -> System.Type

	public MakeArrayType(method) : rank : Int -> System.Type

	public MakeByRefType(method) : Void -> System.Type

	public MakePointerType(method) : Void -> System.Type

	public SetCustomAttribute(method) : customBuilder : System.Reflection.Emit.CustomAttributeBuilder -> Void

	public SetCustomAttribute(method) : con : System.Reflection.ConstructorInfo -> binaryAttribute : cs.NativeArray<cs.types.UInt8> -> Void

}