extern class System.Threading.WaitHandle extends System.MarshalByRefObject implements System.IDisposable{
	new(method) : Void -> Void

	public SafeWaitHandle((get,set)) : Microsoft.Win32.SafeHandles.SafeWaitHandle

	public Handle((get,set)) : System.IntPtr

	public Close(method) : Void -> Void

	public Dispose(method) : Void -> Void

	Dispose(method) : explicitDisposing : Bool -> Void

	get_Handle(method) : Void -> System.IntPtr

	set_Handle(method) : value : System.IntPtr -> System.IntPtr

	get_SafeWaitHandle(method) : Void -> Microsoft.Win32.SafeHandles.SafeWaitHandle

	set_SafeWaitHandle(method) : value : Microsoft.Win32.SafeHandles.SafeWaitHandle -> Microsoft.Win32.SafeHandles.SafeWaitHandle

	public WaitOne(method) : Void -> Bool

	public WaitOne(method) : timeout : System.TimeSpan -> exitContext : Bool -> Bool

	public WaitOne(method) : timeout : System.TimeSpan -> Bool

	public WaitOne(method) : millisecondsTimeout : Int -> Bool

	public WaitOne(method) : millisecondsTimeout : Int -> exitContext : Bool -> Bool

	Finalize(method) : Void -> Void

	static InvalidHandle((default,never)) : System.IntPtr

	static public WaitTimeout((default,never)) : Int

	static public WaitAll(method) : waitHandles : cs.NativeArray<System.Threading.WaitHandle> -> Bool

	static public WaitAll(method) : waitHandles : cs.NativeArray<System.Threading.WaitHandle> -> timeout : System.TimeSpan -> Bool

	static public WaitAll(method) : waitHandles : cs.NativeArray<System.Threading.WaitHandle> -> millisecondsTimeout : Int -> Bool

	static public WaitAll(method) : waitHandles : cs.NativeArray<System.Threading.WaitHandle> -> timeout : System.TimeSpan -> exitContext : Bool -> Bool

	static public WaitAll(method) : waitHandles : cs.NativeArray<System.Threading.WaitHandle> -> millisecondsTimeout : Int -> exitContext : Bool -> Bool

	static public WaitAny(method) : waitHandles : cs.NativeArray<System.Threading.WaitHandle> -> Int

	static public WaitAny(method) : waitHandles : cs.NativeArray<System.Threading.WaitHandle> -> timeout : System.TimeSpan -> exitContext : Bool -> Int

	static public WaitAny(method) : waitHandles : cs.NativeArray<System.Threading.WaitHandle> -> millisecondsTimeout : Int -> Int

	static public WaitAny(method) : waitHandles : cs.NativeArray<System.Threading.WaitHandle> -> timeout : System.TimeSpan -> Int

	static public WaitAny(method) : waitHandles : cs.NativeArray<System.Threading.WaitHandle> -> millisecondsTimeout : Int -> exitContext : Bool -> Int

	static public SignalAndWait(method) : toSignal : System.Threading.WaitHandle -> toWaitOn : System.Threading.WaitHandle -> Bool

	static public SignalAndWait(method) : toSignal : System.Threading.WaitHandle -> toWaitOn : System.Threading.WaitHandle -> timeout : System.TimeSpan -> exitContext : Bool -> Bool

	static public SignalAndWait(method) : toSignal : System.Threading.WaitHandle -> toWaitOn : System.Threading.WaitHandle -> millisecondsTimeout : Int -> exitContext : Bool -> Bool

}