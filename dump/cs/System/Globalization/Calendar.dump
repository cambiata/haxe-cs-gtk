extern class System.Globalization.Calendar implements System.ICloneable{
	new(method) : Void -> Void

	public TwoDigitYearMax((get,set)) : Int

	public IsReadOnly((get,never)) : Bool

	public MinSupportedDateTime((get,never)) : System.DateTime

	public MaxSupportedDateTime((get,never)) : System.DateTime

	public AlgorithmType((get,never)) : System.Globalization.CalendarAlgorithmType

	public Eras((get,never)) : cs.NativeArray<Int>

	get_Eras(method) : Void -> cs.NativeArray<Int>

	get_AlgorithmType(method) : Void -> System.Globalization.CalendarAlgorithmType

	get_MaxSupportedDateTime(method) : Void -> System.DateTime

	get_MinSupportedDateTime(method) : Void -> System.DateTime

	public Clone(method) : Void -> Dynamic

	public GetLeapMonth(method) : year : Int -> Int

	public GetLeapMonth(method) : year : Int -> era : Int -> Int

	get_IsReadOnly(method) : Void -> Bool

	get_TwoDigitYearMax(method) : Void -> Int

	set_TwoDigitYearMax(method) : value : Int -> Int

	public AddDays(method) : time : System.DateTime -> days : Int -> System.DateTime

	public AddHours(method) : time : System.DateTime -> hours : Int -> System.DateTime

	public AddMilliseconds(method) : time : System.DateTime -> milliseconds : Float -> System.DateTime

	public AddMinutes(method) : time : System.DateTime -> minutes : Int -> System.DateTime

	public AddMonths(method) : time : System.DateTime -> months : Int -> System.DateTime

	public AddSeconds(method) : time : System.DateTime -> seconds : Int -> System.DateTime

	public AddWeeks(method) : time : System.DateTime -> weeks : Int -> System.DateTime

	public AddYears(method) : time : System.DateTime -> years : Int -> System.DateTime

	public GetDayOfMonth(method) : time : System.DateTime -> Int

	public GetDayOfWeek(method) : time : System.DateTime -> System.DayOfWeek

	public GetDayOfYear(method) : time : System.DateTime -> Int

	public GetDaysInMonth(method) : year : Int -> month : Int -> Int

	public GetDaysInMonth(method) : year : Int -> month : Int -> era : Int -> Int

	public GetDaysInYear(method) : year : Int -> Int

	public GetDaysInYear(method) : year : Int -> era : Int -> Int

	public GetEra(method) : time : System.DateTime -> Int

	public GetHour(method) : time : System.DateTime -> Int

	public GetMilliseconds(method) : time : System.DateTime -> Float

	public GetMinute(method) : time : System.DateTime -> Int

	public GetMonth(method) : time : System.DateTime -> Int

	public GetMonthsInYear(method) : year : Int -> Int

	public GetMonthsInYear(method) : year : Int -> era : Int -> Int

	public GetSecond(method) : time : System.DateTime -> Int

	public GetWeekOfYear(method) : time : System.DateTime -> rule : System.Globalization.CalendarWeekRule -> firstDayOfWeek : System.DayOfWeek -> Int

	public GetYear(method) : time : System.DateTime -> Int

	public IsLeapDay(method) : year : Int -> month : Int -> day : Int -> Bool

	public IsLeapDay(method) : year : Int -> month : Int -> day : Int -> era : Int -> Bool

	public IsLeapMonth(method) : year : Int -> month : Int -> Bool

	public IsLeapMonth(method) : year : Int -> month : Int -> era : Int -> Bool

	public IsLeapYear(method) : year : Int -> Bool

	public IsLeapYear(method) : year : Int -> era : Int -> Bool

	public ToDateTime(method) : year : Int -> month : Int -> day : Int -> hour : Int -> minute : Int -> second : Int -> millisecond : Int -> System.DateTime

	public ToDateTime(method) : year : Int -> month : Int -> day : Int -> hour : Int -> minute : Int -> second : Int -> millisecond : Int -> era : Int -> System.DateTime

	public ToFourDigitYear(method) : year : Int -> Int

	static public CurrentEra((default,never)) : Int

	static public ReadOnly(method) : calendar : System.Globalization.Calendar -> System.Globalization.Calendar

}