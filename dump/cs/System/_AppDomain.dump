extern interface System._AppDomain{
	UnhandledException(var) : cs.system.UnhandledExceptionEventHandler

	TypeResolve(var) : cs.system.ResolveEventHandler

	ResourceResolve(var) : cs.system.ResolveEventHandler

	ProcessExit(var) : cs.system.EventHandler

	DomainUnload(var) : cs.system.EventHandler

	AssemblyResolve(var) : cs.system.ResolveEventHandler

	AssemblyLoad(var) : cs.system.AssemblyLoadEventHandler

	public ShadowCopyFiles((get,never)) : Bool

	public RelativeSearchPath((get,never)) : String

	public FriendlyName((get,never)) : String

	public Evidence((get,never)) : System.Security.Policy.Evidence

	public DynamicDirectory((get,never)) : String

	public BaseDirectory((get,never)) : String

	public add_AssemblyLoad(method) : value : cs.system.AssemblyLoadEventHandler -> Void

	public remove_AssemblyLoad(method) : value : cs.system.AssemblyLoadEventHandler -> Void

	public add_AssemblyResolve(method) : value : cs.system.ResolveEventHandler -> Void

	public remove_AssemblyResolve(method) : value : cs.system.ResolveEventHandler -> Void

	public add_DomainUnload(method) : value : cs.system.EventHandler -> Void

	public remove_DomainUnload(method) : value : cs.system.EventHandler -> Void

	public add_ProcessExit(method) : value : cs.system.EventHandler -> Void

	public remove_ProcessExit(method) : value : cs.system.EventHandler -> Void

	public add_ResourceResolve(method) : value : cs.system.ResolveEventHandler -> Void

	public remove_ResourceResolve(method) : value : cs.system.ResolveEventHandler -> Void

	public add_TypeResolve(method) : value : cs.system.ResolveEventHandler -> Void

	public remove_TypeResolve(method) : value : cs.system.ResolveEventHandler -> Void

	public add_UnhandledException(method) : value : cs.system.UnhandledExceptionEventHandler -> Void

	public remove_UnhandledException(method) : value : cs.system.UnhandledExceptionEventHandler -> Void

	get_BaseDirectory(method) : Void -> String

	get_DynamicDirectory(method) : Void -> String

	get_Evidence(method) : Void -> System.Security.Policy.Evidence

	get_FriendlyName(method) : Void -> String

	get_RelativeSearchPath(method) : Void -> String

	get_ShadowCopyFiles(method) : Void -> Bool

	public AppendPrivatePath(method) : path : String -> Void

	public ClearPrivatePath(method) : Void -> Void

	public ClearShadowCopyPath(method) : Void -> Void

	public CreateInstance(method) : assemblyName : String -> typeName : String -> System.Runtime.Remoting.ObjectHandle

	public CreateInstance(method) : assemblyName : String -> typeName : String -> ignoreCase : Bool -> bindingAttr : System.Reflection.BindingFlags -> binder : System.Reflection.Binder -> args : cs.NativeArray<Dynamic> -> culture : System.Globalization.CultureInfo -> activationAttributes : cs.NativeArray<Dynamic> -> securityAttributes : System.Security.Policy.Evidence -> System.Runtime.Remoting.ObjectHandle

	public CreateInstance(method) : assemblyName : String -> typeName : String -> activationAttributes : cs.NativeArray<Dynamic> -> System.Runtime.Remoting.ObjectHandle

	public CreateInstanceFrom(method) : assemblyFile : String -> typeName : String -> System.Runtime.Remoting.ObjectHandle

	public CreateInstanceFrom(method) : assemblyFile : String -> typeName : String -> ignoreCase : Bool -> bindingAttr : System.Reflection.BindingFlags -> binder : System.Reflection.Binder -> args : cs.NativeArray<Dynamic> -> culture : System.Globalization.CultureInfo -> activationAttributes : cs.NativeArray<Dynamic> -> securityAttributes : System.Security.Policy.Evidence -> System.Runtime.Remoting.ObjectHandle

	public CreateInstanceFrom(method) : assemblyFile : String -> typeName : String -> activationAttributes : cs.NativeArray<Dynamic> -> System.Runtime.Remoting.ObjectHandle

	public DefineDynamicAssembly(method) : name : System.Reflection.AssemblyName -> access : System.Reflection.Emit.AssemblyBuilderAccess -> System.Reflection.Emit.AssemblyBuilder

	public DefineDynamicAssembly(method) : name : System.Reflection.AssemblyName -> access : System.Reflection.Emit.AssemblyBuilderAccess -> dir : String -> evidence : System.Security.Policy.Evidence -> requiredPermissions : System.Security.PermissionSet -> optionalPermissions : System.Security.PermissionSet -> refusedPermissions : System.Security.PermissionSet -> isSynchronized : Bool -> System.Reflection.Emit.AssemblyBuilder

	public DefineDynamicAssembly(method) : name : System.Reflection.AssemblyName -> access : System.Reflection.Emit.AssemblyBuilderAccess -> dir : String -> evidence : System.Security.Policy.Evidence -> requiredPermissions : System.Security.PermissionSet -> optionalPermissions : System.Security.PermissionSet -> refusedPermissions : System.Security.PermissionSet -> System.Reflection.Emit.AssemblyBuilder

	public DefineDynamicAssembly(method) : name : System.Reflection.AssemblyName -> access : System.Reflection.Emit.AssemblyBuilderAccess -> dir : String -> requiredPermissions : System.Security.PermissionSet -> optionalPermissions : System.Security.PermissionSet -> refusedPermissions : System.Security.PermissionSet -> System.Reflection.Emit.AssemblyBuilder

	public DefineDynamicAssembly(method) : name : System.Reflection.AssemblyName -> access : System.Reflection.Emit.AssemblyBuilderAccess -> evidence : System.Security.Policy.Evidence -> requiredPermissions : System.Security.PermissionSet -> optionalPermissions : System.Security.PermissionSet -> refusedPermissions : System.Security.PermissionSet -> System.Reflection.Emit.AssemblyBuilder

	public DefineDynamicAssembly(method) : name : System.Reflection.AssemblyName -> access : System.Reflection.Emit.AssemblyBuilderAccess -> requiredPermissions : System.Security.PermissionSet -> optionalPermissions : System.Security.PermissionSet -> refusedPermissions : System.Security.PermissionSet -> System.Reflection.Emit.AssemblyBuilder

	public DefineDynamicAssembly(method) : name : System.Reflection.AssemblyName -> access : System.Reflection.Emit.AssemblyBuilderAccess -> dir : String -> evidence : System.Security.Policy.Evidence -> System.Reflection.Emit.AssemblyBuilder

	public DefineDynamicAssembly(method) : name : System.Reflection.AssemblyName -> access : System.Reflection.Emit.AssemblyBuilderAccess -> dir : String -> System.Reflection.Emit.AssemblyBuilder

	public DefineDynamicAssembly(method) : name : System.Reflection.AssemblyName -> access : System.Reflection.Emit.AssemblyBuilderAccess -> evidence : System.Security.Policy.Evidence -> System.Reflection.Emit.AssemblyBuilder

	public DoCallBack(method) : theDelegate : cs.system.CrossAppDomainDelegate -> Void

	public ExecuteAssembly(method) : assemblyFile : String -> Int

	public ExecuteAssembly(method) : assemblyFile : String -> assemblySecurity : System.Security.Policy.Evidence -> args : cs.NativeArray<String> -> Int

	public ExecuteAssembly(method) : assemblyFile : String -> assemblySecurity : System.Security.Policy.Evidence -> Int

	public GetAssemblies(method) : Void -> cs.NativeArray<System.Reflection.Assembly>

	public GetData(method) : name : String -> Dynamic

	public GetLifetimeService(method) : Void -> Dynamic

	public GetType(method) : Void -> System.Type

	public InitializeLifetimeService(method) : Void -> Dynamic

	public Load(method) : assemblyRef : System.Reflection.AssemblyName -> System.Reflection.Assembly

	public Load(method) : rawAssembly : cs.NativeArray<cs.types.UInt8> -> rawSymbolStore : cs.NativeArray<cs.types.UInt8> -> securityEvidence : System.Security.Policy.Evidence -> System.Reflection.Assembly

	public Load(method) : assemblyString : String -> assemblySecurity : System.Security.Policy.Evidence -> System.Reflection.Assembly

	public Load(method) : rawAssembly : cs.NativeArray<cs.types.UInt8> -> rawSymbolStore : cs.NativeArray<cs.types.UInt8> -> System.Reflection.Assembly

	public Load(method) : assemblyRef : System.Reflection.AssemblyName -> assemblySecurity : System.Security.Policy.Evidence -> System.Reflection.Assembly

	public Load(method) : assemblyString : String -> System.Reflection.Assembly

	public Load(method) : rawAssembly : cs.NativeArray<cs.types.UInt8> -> System.Reflection.Assembly

	public SetAppDomainPolicy(method) : domainPolicy : System.Security.Policy.PolicyLevel -> Void

	public SetCachePath(method) : s : String -> Void

	public SetData(method) : name : String -> data : Dynamic -> Void

	public SetPrincipalPolicy(method) : policy : System.Security.Principal.PrincipalPolicy -> Void

	public SetShadowCopyPath(method) : s : String -> Void

	public SetThreadPrincipal(method) : principal : System.Security.Principal.IPrincipal -> Void

	public ToString(method) : Void -> String

	public GetIDsOfNames(method) : riid : cs.Ref<System.Guid> -> rgszNames : System.IntPtr -> cNames : UInt -> lcid : UInt -> rgDispId : System.IntPtr -> Void

	public GetTypeInfo(method) : iTInfo : UInt -> lcid : UInt -> ppTInfo : System.IntPtr -> Void

	public GetTypeInfoCount(method) : pcTInfo : cs.Out<UInt> -> Void

	public Invoke(method) : dispIdMember : UInt -> riid : cs.Ref<System.Guid> -> lcid : UInt -> wFlags : cs.types.Int16 -> pDispParams : System.IntPtr -> pVarResult : System.IntPtr -> pExcepInfo : System.IntPtr -> puArgErr : System.IntPtr -> Void

}