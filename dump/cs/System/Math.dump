extern class System.Math{
	static public PI((default,never)) : Float

	static public E((default,never)) : Float

	static public Abs(method) : value : System.Decimal -> System.Decimal

	static public Abs(method) : value : cs.types.Int16 -> cs.types.Int16

	static public Abs(method) : value : cs.types.Int8 -> cs.types.Int8

	static public Abs(method) : value : haxe.Int64 -> haxe.Int64

	static public Abs(method) : value : Int -> Int

	static public Abs(method) : value : Single -> Single

	static public Abs(method) : value : Float -> Float

	static public Ceiling(method) : d : System.Decimal -> System.Decimal

	static public Ceiling(method) : a : Float -> Float

	static public BigMul(method) : a : Int -> b : Int -> haxe.Int64

	static public DivRem(method) : a : Int -> b : Int -> result : cs.Out<Int> -> Int

	static public DivRem(method) : a : haxe.Int64 -> b : haxe.Int64 -> result : cs.Out<haxe.Int64> -> haxe.Int64

	static public Floor(method) : d : Float -> Float

	static public Floor(method) : d : System.Decimal -> System.Decimal

	static public IEEERemainder(method) : x : Float -> y : Float -> Float

	static public Log(method) : a : Float -> newBase : Float -> Float

	static public Log(method) : d : Float -> Float

	static public Max(method) : val1 : cs.types.UInt8 -> val2 : cs.types.UInt8 -> cs.types.UInt8

	static public Max(method) : val1 : cs.types.UInt16 -> val2 : cs.types.UInt16 -> cs.types.UInt16

	static public Max(method) : val1 : cs.types.UInt64 -> val2 : cs.types.UInt64 -> cs.types.UInt64

	static public Max(method) : val1 : UInt -> val2 : UInt -> UInt

	static public Max(method) : val1 : cs.types.Int16 -> val2 : cs.types.Int16 -> cs.types.Int16

	static public Max(method) : val1 : cs.types.Int8 -> val2 : cs.types.Int8 -> cs.types.Int8

	static public Max(method) : val1 : haxe.Int64 -> val2 : haxe.Int64 -> haxe.Int64

	static public Max(method) : val1 : Int -> val2 : Int -> Int

	static public Max(method) : val1 : Single -> val2 : Single -> Single

	static public Max(method) : val1 : Float -> val2 : Float -> Float

	static public Max(method) : val1 : System.Decimal -> val2 : System.Decimal -> System.Decimal

	static public Min(method) : val1 : cs.types.UInt8 -> val2 : cs.types.UInt8 -> cs.types.UInt8

	static public Min(method) : val1 : cs.types.UInt16 -> val2 : cs.types.UInt16 -> cs.types.UInt16

	static public Min(method) : val1 : cs.types.UInt64 -> val2 : cs.types.UInt64 -> cs.types.UInt64

	static public Min(method) : val1 : UInt -> val2 : UInt -> UInt

	static public Min(method) : val1 : cs.types.Int16 -> val2 : cs.types.Int16 -> cs.types.Int16

	static public Min(method) : val1 : cs.types.Int8 -> val2 : cs.types.Int8 -> cs.types.Int8

	static public Min(method) : val1 : haxe.Int64 -> val2 : haxe.Int64 -> haxe.Int64

	static public Min(method) : val1 : Int -> val2 : Int -> Int

	static public Min(method) : val1 : Single -> val2 : Single -> Single

	static public Min(method) : val1 : Float -> val2 : Float -> Float

	static public Min(method) : val1 : System.Decimal -> val2 : System.Decimal -> System.Decimal

	static public Round(method) : d : System.Decimal -> System.Decimal

	static public Round(method) : value : Float -> digits : Int -> mode : System.MidpointRounding -> Float

	static public Round(method) : value : Float -> mode : System.MidpointRounding -> Float

	static public Round(method) : value : Float -> digits : Int -> Float

	static public Round(method) : a : Float -> Float

	static public Round(method) : d : System.Decimal -> decimals : Int -> mode : System.MidpointRounding -> System.Decimal

	static public Round(method) : d : System.Decimal -> mode : System.MidpointRounding -> System.Decimal

	static public Round(method) : d : System.Decimal -> decimals : Int -> System.Decimal

	static public Truncate(method) : d : Float -> Float

	static public Truncate(method) : d : System.Decimal -> System.Decimal

	static public Sign(method) : value : System.Decimal -> Int

	static public Sign(method) : value : cs.types.Int16 -> Int

	static public Sign(method) : value : cs.types.Int8 -> Int

	static public Sign(method) : value : haxe.Int64 -> Int

	static public Sign(method) : value : Int -> Int

	static public Sign(method) : value : Single -> Int

	static public Sign(method) : value : Float -> Int

	static public Sin(method) : a : Float -> Float

	static public Cos(method) : d : Float -> Float

	static public Tan(method) : a : Float -> Float

	static public Sinh(method) : value : Float -> Float

	static public Cosh(method) : value : Float -> Float

	static public Tanh(method) : value : Float -> Float

	static public Acos(method) : d : Float -> Float

	static public Asin(method) : d : Float -> Float

	static public Atan(method) : d : Float -> Float

	static public Atan2(method) : y : Float -> x : Float -> Float

	static public Exp(method) : d : Float -> Float

	static public Log10(method) : d : Float -> Float

	static public Pow(method) : x : Float -> y : Float -> Float

	static public Sqrt(method) : d : Float -> Float

}