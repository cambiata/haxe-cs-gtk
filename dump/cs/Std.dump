class Std{
	static public is(method) : v : Dynamic -> t : Dynamic -> Bool

	 = [Function:v : Dynamic -> t : Dynamic -> Bool]
		[Arg:Dynamic] [Local v(87):Dynamic]
		[Arg:Dynamic] [Local t(88):Dynamic]
		[Block:Dynamic]
			[If:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Local v(87):Dynamic]
						==
						[Const null:Unknown<22>]
				[Then:Dynamic] [Return:Dynamic]
					[Binop:Bool]
						[Local t(88):Dynamic]
						==
						[TypeExpr Dynamic:Abstract<Dynamic>]
			[If:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Local t(88):Dynamic]
						==
						[Const null:Unknown<23>]
				[Then:Dynamic] [Return:Dynamic] [Const false:Bool]
			[Var clt(89):System.Type] [Cast:System.Type] [Local t(88):Dynamic]
			[If:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Local clt(89):System.Type]
						==
						[Const null:System.Type]
				[Then:Dynamic] [Return:Dynamic] [Const false:Bool]
			[Var name(90):String] [Cast:String] [Local clt(89):System.Type]
			[Switch:Unknown<27>]
				[Parenthesis:String] [Local name(90):String]
				[Case:Dynamic]
					[Const "System.Double":String]
					[Return:Dynamic]
						[Call:Bool]
							[Local __cs__(91):String -> Unknown<24>]
							[Const "v is double || v is int":String]
				[Case:Dynamic]
					[Const "System.Int32":String]
					[Return:Dynamic]
						[Call:Bool]
							[Local __cs__(92):String -> Unknown<25>]
							[Const "haxe.lang.Runtime.isInt(v)":String]
				[Case:Dynamic]
					[Const "System.Boolean":String]
					[Return:Dynamic]
						[Call:Bool]
							[Local __cs__(93):String -> Unknown<26>]
							[Const "v is bool":String]
				[Case:Dynamic]
					[Const "System.Object":String]
					[Return:Dynamic] [Const true:Bool]
			[Return:Dynamic]
				[Call:Bool]
					[Field:c : System.Type -> Bool]
						[Local clt(89):System.Type]
						[FInstance:c : System.Type -> Bool]
							System.Type
							IsAssignableFrom
					[Call:System.Type]
						[Field:obj : Dynamic -> System.Type]
							[TypeExpr cs.Lib:Class<cs.Lib>]
							[FStatic:obj : Dynamic -> System.Type]
								cs.Lib
								getNativeType
						[Local v(87):Dynamic]

	static public string(method) : s : Dynamic -> String

	 = [Function:s : Dynamic -> String]
		[Arg:Dynamic] [Local s(148):Dynamic]
		[Block:Dynamic]
			[If:Void]
				[Parenthesis:Bool]
					[Binop:Bool]
						[Local s(148):Dynamic]
						==
						[Const null:Unknown<28>]
				[Then:Dynamic] [Return:Dynamic] [Const "null":String]
			[If:Void]
				[Parenthesis:Bool]
					[Call:Bool]
						[Field:v : Dynamic -> t : Dynamic -> Bool]
							[TypeExpr Std:Class<Std>]
							[FStatic:v : Dynamic -> t : Dynamic -> Bool]
								Std
								is
						[Local s(148):Dynamic]
						[TypeExpr Bool:Abstract<Bool>]
				[Then:String] [If:String]
					[Parenthesis:Bool]
						[Cast:Bool]
							[Local s(148):Dynamic]
							[TypeExpr Bool:Bool]
					[Then:Dynamic] [Return:Dynamic] [Const "true":String]
					[Else:Dynamic] [Return:Dynamic] [Const "false":String]
			[Return:Dynamic]
				[Call:Dynamic]
					[Field:Dynamic]
						[Local s(148):Dynamic]
						[FDynamic:Dynamic] ToString

}